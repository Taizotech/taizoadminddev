{"version":3,"file":"static/js/70.3644f1a8.chunk.js","mappings":"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","sources":["webpack://admin-login-react/./src/pages/Employer/Invoices/invoice.module.scss?22f7","pages/Payment/employerPayment.js","webpack://admin-login-react/./src/pages/Payment/UserPayment.module.scss?6691","pages/Payment/candidatePayment.js","pages/Payment/paymentContainer.js","webpack://admin-login-react/./src/assets/common.module.scss?d766"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"invoice_form_wrp\":\"invoice_invoice_form_wrp__IWC98\"};","/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport {\r\n  PostPaymentDetails,\r\n  getJobIndustries,\r\n  getJobRole,\r\n} from \"../../apiServices\";\r\nimport style from \"../Employer/Invoices/invoice.module.scss\";\r\nimport SuccessTick from \"../../components/success_tick\";\r\nimport { MyModal } from \"../../utility\";\r\nimport ModalContainer from \"../../components/modal_popup\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport ConfirmationPopup from \"../../components/ModalPopups/confirmationPopup\";\r\n\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n\r\nconst EmployerPayment = () => {\r\n  const [options, setOptions] = useState({ industries: [], jobRoles: [] });\r\n\r\n  // const [value, setValue] = React.useState(dayjs(\"2022-04-17\"));\r\n\r\n  const idCounter = useRef(0);\r\n\r\n  const [fields, setFields] = useState([\r\n    {\r\n      id: idCounter.current++,\r\n      jobRole: { val: \"\", err: false },\r\n      industry: { val: \"\", err: false },\r\n      openings: { val: \"\", err: false },\r\n      lookingFor: { val: \"\", err: false },\r\n      amount: { val: 0, err: false },\r\n    },\r\n  ]);\r\n\r\n  const [jobDetails, setJobDetails] = useState([]);\r\n\r\n  const [formData, setFormData] = useState({\r\n    jobDetails: jobDetails,\r\n    employerID: \"\",\r\n    paymentID: \"\",\r\n    paymentMethod: \"\",\r\n    chequeDate: new Date(),\r\n    chequeNo: \"\",\r\n    amount: \"\",\r\n  });\r\n\r\n  const [enableSubmit, setEnableSubmit] = useState(false);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [showConfirmPopup, setShowConfirmPopup] = useState(false);\r\n\r\n  const [errors, setErrors] = useState({\r\n    employerID: \"\",\r\n    paymentID: \"\",\r\n    paymentMethod: \"\",\r\n    chequeDate: null,\r\n    chequeNo: \"\",\r\n    amount: \"\",\r\n  });\r\n\r\n  function handleConfirmationClose() {\r\n    setShowConfirmPopup(false);\r\n  }\r\n\r\n  function handleConfirmationOpen(e) {\r\n    setShowConfirmPopup(true);\r\n  }\r\n\r\n  function ConfirmFormSubmit() {\r\n    // to post details\r\n    setEnableSubmit(true);\r\n\r\n    PostPaymentDetails(formData).then((data) => {\r\n      console.log(data, \"proforma Invoice api data\");\r\n\r\n      const { statuscode } = data;\r\n\r\n      if (data.code != 200) {\r\n        alert(\"something went wrong\");\r\n        return false;\r\n      }\r\n\r\n      setEnableSubmit(false);\r\n      setShowSuccess(true);\r\n      setTimeout(() => {\r\n        setShowSuccess(false);\r\n        setShowConfirmPopup(false);\r\n      }, 3000);\r\n\r\n      setFormData((prev) => ({\r\n        ...prev,\r\n        jobDetails: jobDetails,\r\n        employerID: \"\",\r\n        paymentID: \"\",\r\n        paymentMethod: \"\",\r\n        chequeDate: new Date(),\r\n        chequeNo: \"\",\r\n        amount: \"\",\r\n      }));\r\n\r\n      setFields([\r\n        {\r\n          id: idCounter.current++,\r\n          jobRole: { val: \"\", err: false },\r\n          industry: { val: \"\", err: false },\r\n          openings: { val: \"\", err: false },\r\n          lookingFor: { val: \"\", err: false },\r\n          amount: { val: 0, err: false },\r\n        },\r\n      ]);\r\n\r\n      setErrors({\r\n        employerID: \"\",\r\n        paymentID: \"\",\r\n        paymentMethod: \"\",\r\n        chequeDate: \"\",\r\n        chequeNo: \"\",\r\n        amount: \"\",\r\n      });\r\n      // noError = 0;\r\n\r\n      // alert(\"Submmitted succeesfully\");\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getJobIndustries().then((data) => {\r\n      let industries = data.results.map((el) => el.industry);\r\n      setOptions((prev) => ({ ...prev, industries: [...industries] }));\r\n    });\r\n    getJobRole(1).then((data) => {\r\n      let jobRoles = data.results.map((el) => el.jobRoles);\r\n      setOptions((prev) => ({ ...prev, jobRoles: [...jobRoles] }));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // to set job details\r\n    setFormData((prev) => ({ ...prev, jobDetails: jobDetails }));\r\n  }, [jobDetails]);\r\n\r\n  const validateFields = (fields) => {\r\n    let valid = true;\r\n\r\n    fields.forEach((field, index) => {\r\n      const updatedField = { ...field };\r\n\r\n      if (field.jobRole.val === \"\") {\r\n        updatedField.jobRole.err = true;\r\n        valid = false;\r\n      } else {\r\n        updatedField.jobRole.err = false;\r\n      }\r\n\r\n      if (field.openings.val === \"\") {\r\n        updatedField.openings.err = true;\r\n        valid = false;\r\n      } else {\r\n        updatedField.openings.err = false;\r\n      }\r\n\r\n      if (field.industry.val === \"\") {\r\n        updatedField.industry.err = true;\r\n        valid = false;\r\n      } else {\r\n        updatedField.industry.err = false;\r\n      }\r\n\r\n      if (field.lookingFor.val === \"\") {\r\n        updatedField.lookingFor.err = true;\r\n        valid = false;\r\n      } else {\r\n        updatedField.lookingFor.err = false;\r\n      }\r\n\r\n      console.log(updatedField);\r\n\r\n      setFields((prev) => {\r\n        let updatedFields = [...prev];\r\n        updatedFields[index] = updatedField;\r\n        return updatedFields;\r\n      });\r\n    });\r\n\r\n    return valid;\r\n  };\r\n\r\n  const addField = () => {\r\n    if (validateFields(fields)) {\r\n      const newField = {\r\n        id: idCounter.current++,\r\n        jobRole: { val: \"\", err: false },\r\n        openings: { val: \"\", err: false },\r\n        industry: { val: \"\", err: false },\r\n        lookingFor: { val: \"\", err: false },\r\n        amount: { val: 0, err: false },\r\n      };\r\n      setFields([...fields, newField]);\r\n    }\r\n  };\r\n\r\n  const removeField = (id) => {\r\n    let updatedFields;\r\n    if (fields.length > 1) {\r\n      updatedFields = fields.filter((field) => field.id !== id);\r\n      setFields(updatedFields);\r\n    }\r\n  };\r\n\r\n  const handleJobDetailsFieldChange = (id, fieldKey, value) => {\r\n    console.log(value);\r\n    const updatedFields = fields.map((field) =>\r\n      field.id === id\r\n        ? {\r\n            ...field,\r\n            [fieldKey]: {\r\n              val: value != null && !value.isNaN ? value : \"\",\r\n              err: value === null,\r\n            },\r\n          }\r\n        : field\r\n    );\r\n    setFields(updatedFields);\r\n  };\r\n\r\n  function handleLookingForChange(key, value) {\r\n    // to filter out which index should be updated\r\n    let fieldToUpdate = fields.filter((el) => el.id == key);\r\n\r\n    setFields((prev) => {\r\n      let updatedFields = [...prev];\r\n      updatedFields.map((el) => {\r\n        if (el.id != key) {\r\n          return el;\r\n        } else {\r\n          return fieldToUpdate;\r\n        }\r\n      });\r\n\r\n      return updatedFields;\r\n    });\r\n  }\r\n\r\n  const handleFieldChange = (field, value) => {\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handlePaymentMethodChange = (name, value) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n      chequeNo: \"\",\r\n      amount: \"\",\r\n      chequeDate: null,\r\n      paymentID: \"\",\r\n    }));\r\n    setErrors((prevErrors) => ({ ...prevErrors, paymentMethod: \"\" }));\r\n    console.log(name, value);\r\n  };\r\n\r\n  const handleAmountChange = (event) => {\r\n    const newValue = event.target.value;\r\n    handleFieldChange(\"amount\", newValue);\r\n\r\n    if (!isNaN(newValue) && newValue != \"\") {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        amount: \"\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        amount: \"Invalid amount\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleChequeNoChange = (event) => {\r\n    const newValue = event.target.value;\r\n    handleFieldChange(\"chequeNo\", newValue);\r\n    if (!isNaN(newValue) && newValue != \"\") {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        chequeNo: \"\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        chequeNo: \"Invalid cheque no\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (e, value) => {\r\n    const newValue = value;\r\n    handleFieldChange(\"chequeDate\", e.$d);\r\n    if (e.$d != null) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        chequeDate: \"\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        chequeDate: \"Please enter valid date\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleEmpIdChange = (event) => {\r\n    const newValue = event.target.value;\r\n    handleFieldChange(\"employerID\", newValue);\r\n    if (!isNaN(newValue)) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        employerID: \"\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        employerID: \"Invalid employer id\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handlePaymentIdChange = (event) => {\r\n    const newValue = event.target.value;\r\n    handleFieldChange(\"paymentID\", newValue);\r\n    if (newValue != \"\") {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        paymentID: \"\",\r\n      }));\r\n    } else {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        paymentID: \"Invalid employer id\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // to create a job details array\r\n    let jobdetailsArray = fields.map((el) => {\r\n      let jobdetailsObj = {\r\n        jobCategory: el.jobRole.val,\r\n        industry: el.industry.val,\r\n        noOfOpenings: el.openings.val,\r\n        isExperienced: el.lookingFor.val === \"Experienced\",\r\n      };\r\n      return jobdetailsObj;\r\n    });\r\n    setJobDetails(jobdetailsArray);\r\n  }, [fields]);\r\n\r\n  // ...\r\n\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let noError = 0;\r\n\r\n    if (formData.employerID == \"\" || isNaN(formData.employerID)) {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        employerID: \"Employer ID  is required *\",\r\n      }));\r\n      noError++;\r\n    }\r\n\r\n    if (\r\n      formData.paymentMethod == \"cheque\" ||\r\n      formData.paymentMethod == \"cash\"\r\n    ) {\r\n      if (formData.paymentMethod == \"cheque\") {\r\n        if (formData.chequeNo == \"\" || isNaN(formData.chequeNo)) {\r\n          setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            chequeNo: \"Please enter valid cheque no\",\r\n          }));\r\n          noError++;\r\n        }\r\n\r\n        if (formData.chequeDate == \"\" || formData.chequeDate == null) {\r\n          setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            chequeDate: \"Please enter valid Cheque date\",\r\n          }));\r\n          noError++;\r\n        }\r\n      }\r\n\r\n      if (formData.amount == \"\" || isNaN(formData.amount)) {\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          amount: \"Please enter valid amount\",\r\n        }));\r\n        noError++;\r\n      }\r\n    }\r\n\r\n    if (formData.paymentMethod == \"payment\") {\r\n      if (formData.paymentID == \"\") {\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          paymentID: \"Please enter valid payment id\",\r\n        }));\r\n        noError++;\r\n      }\r\n    }\r\n\r\n    if (formData.paymentMethod == \"\") {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        paymentMethod: \"Please enter payment payment method\",\r\n      }));\r\n      noError++;\r\n    }\r\n\r\n    if (!validateFields(fields)) {\r\n      noError++;\r\n    }\r\n\r\n    // Check if any errors exist\r\n    const hasErrors = !Object.keys(errors).every((key) => errors[key] === \"\");\r\n\r\n    // If there are any errors, return early\r\n    if (noError != 0) {\r\n      console.log(\"Form has errors. Please correct them.\");\r\n      return;\r\n    }\r\n\r\n    handleConfirmationOpen();\r\n  };\r\n\r\n  // ...\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ps-4\">\r\n        <div className={`${style.invoice_form_wrp}`}>\r\n          <>\r\n            <form onSubmit={handleFormSubmit}>\r\n              <div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-6\">\r\n                    <TextField\r\n                      label=\"Employer ID\"\r\n                      variant=\"outlined\"\r\n                      value={formData.employerID}\r\n                      onChange={handleEmpIdChange}\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      error={Boolean(errors.employerID)}\r\n                      helperText={errors.employerID}\r\n                      inputProps={{ maxLength: 7 }}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-6\">\r\n                    <Autocomplete\r\n                      value={formData.paymentMethod}\r\n                      style={{ margin: \"10px 0\" }}\r\n                      onChange={(e, newValue) =>\r\n                        handlePaymentMethodChange(\"paymentMethod\", newValue)\r\n                      }\r\n                      clearIcon={null}\r\n                      options={[\"payment\", \"cheque\", \"cash\"]}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label=\"Payment Method\"\r\n                          variant=\"outlined\"\r\n                          error={Boolean(errors.paymentMethod)}\r\n                          helperText={errors.paymentMethod}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  {formData.paymentMethod == \"cheque\" && (\r\n                    <>\r\n                      <div className=\"col-sm-6\">\r\n                        <TextField\r\n                          required\r\n                          id=\"outlined-required\"\r\n                          label=\"Cheque No\"\r\n                          name=\"ChequeNo\"\r\n                          value={formData.chequeNo}\r\n                          error={Boolean(errors.chequeNo)}\r\n                          helperText={errors.chequeNo}\r\n                          InputLabelProps={\r\n                            {\r\n                              // shrink: true,\r\n                            }\r\n                          }\r\n                          sx={{ width: \"100%\" }}\r\n                          fullWidth\r\n                          onChange={(e) => {\r\n                            handleChequeNoChange(e);\r\n                          }}\r\n                          inputProps={{\r\n                            maxLength: 50,\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n\r\n                {formData.paymentMethod == \"cheque\" ||\r\n                formData.paymentMethod == \"cash\" ? (\r\n                  <>\r\n                    <div className=\"row mt-2\">\r\n                      {formData.paymentMethod == \"cheque\" && (\r\n                        <>\r\n                          <div className=\"col-sm-6\">\r\n                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                              <DatePicker\r\n                                label=\"Cheque Date\"\r\n                                value={formData.chequeDate}\r\n                                onChange={(e, val) => {\r\n                                  handleDateChange(e, val);\r\n                                }}\r\n                                fullWidth\r\n                                sx={{ width: \"100%\" }}\r\n                                slotProps={{\r\n                                  textField: {\r\n                                    helperText: errors.chequeDate,\r\n                                    error: Boolean(errors.chequeDate),\r\n                                  },\r\n                                }}\r\n                              />\r\n                            </LocalizationProvider>\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                      <div className=\"col-sm-6\">\r\n                        <TextField\r\n                          required\r\n                          id=\"outlined-required\"\r\n                          label=\"Amount\"\r\n                          name=\"amount\"\r\n                          value={formData.amount}\r\n                          // sx={{ width: \"100%\" }}\r\n                          fullWidth\r\n                          onChange={(e) => {\r\n                            handleAmountChange(e);\r\n                          }}\r\n                          inputProps={{\r\n                            maxLength: 7,\r\n                          }}\r\n                          error={Boolean(errors.amount)}\r\n                          helperText={errors.amount}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                <div className=\"row\">\r\n                  {formData.paymentMethod == \"payment\" && (\r\n                    <>\r\n                      <div className=\"col-sm-6\">\r\n                        <TextField\r\n                          label=\"Payment ID\"\r\n                          variant=\"outlined\"\r\n                          value={formData.paymentID}\r\n                          onChange={handlePaymentIdChange}\r\n                          fullWidth\r\n                          margin=\"normal\"\r\n                          error={Boolean(errors.paymentID)}\r\n                          helperText={errors.paymentID}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"\">\r\n                  {fields.map((field) => (\r\n                    <div key={field.id}>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <Autocomplete\r\n                            value={field.industry.val}\r\n                            style={{ margin: \"10px 0\" }}\r\n                            onChange={(e, newValue) => {\r\n                              handleJobDetailsFieldChange(\r\n                                field.id,\r\n                                \"industry\",\r\n                                newValue\r\n                              );\r\n                            }}\r\n                            clearIcon={null}\r\n                            options={options.industries} // Replace industryOptions with your array of options\r\n                            getOptionLabel={(option) => option}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Industry\"\r\n                                variant=\"outlined\"\r\n                                error={field.industry.err}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <Autocomplete\r\n                            value={field.jobRole.val}\r\n                            style={{ margin: \"10px 0\" }}\r\n                            onChange={(e, newValue) =>\r\n                              handleJobDetailsFieldChange(\r\n                                field.id,\r\n                                \"jobRole\",\r\n                                newValue\r\n                              )\r\n                            }\r\n                            clearIcon={null}\r\n                            options={options.jobRoles} // Replace jobRoleOptions with your array of options\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Job Category\"\r\n                                variant=\"outlined\"\r\n                                error={field.jobRole.err}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                          <Autocomplete\r\n                            value={field.openings.val}\r\n                            style={{ margin: \"10px 0\" }}\r\n                            onChange={(e, newValue) => {\r\n                              handleJobDetailsFieldChange(\r\n                                field.id,\r\n                                \"openings\",\r\n                                newValue\r\n                              );\r\n                            }}\r\n                            clearIcon={null}\r\n                            options={[\r\n                              \"1\",\r\n                              \"2\",\r\n                              \"3\",\r\n                              \"4\",\r\n                              \"5\",\r\n                              \"6\",\r\n                              \"7\",\r\n                              \"8\",\r\n                              \"9\",\r\n                              \"10\",\r\n                              \"11\",\r\n                              \"12\",\r\n                              \"13\",\r\n                              \"14\",\r\n                              \"15\",\r\n                              \"16\",\r\n                              \"17\",\r\n                              \"18\",\r\n                              \"19\",\r\n                              \"20\",\r\n                              \"21\",\r\n                              \"22\",\r\n                              \"23\",\r\n                              \"24\",\r\n                              \"25\",\r\n                              \"26\",\r\n                              \"27\",\r\n                              \"28\",\r\n                              \"29\",\r\n                              \"30\",\r\n                              \"31\",\r\n                              \"32\",\r\n                              \"33\",\r\n                              \"34\",\r\n                              \"35\",\r\n                              \"36\",\r\n                              \"37\",\r\n                              \"38\",\r\n                              \"39\",\r\n                              \"40\",\r\n                              \"41\",\r\n                              \"42\",\r\n                              \"43\",\r\n                              \"44\",\r\n                              \"45\",\r\n                              \"46\",\r\n                              \"47\",\r\n                              \"48\",\r\n                              \"49\",\r\n                              \"50\",\r\n                              \"51\",\r\n                              \"52\",\r\n                              \"53\",\r\n                              \"54\",\r\n                              \"55\",\r\n                              \"56\",\r\n                              \"57\",\r\n                              \"58\",\r\n                              \"59\",\r\n                              \"60\",\r\n                              \"61\",\r\n                              \"62\",\r\n                              \"63\",\r\n                              \"64\",\r\n                              \"65\",\r\n                              \"66\",\r\n                              \"67\",\r\n                              \"68\",\r\n                              \"69\",\r\n                              \"70\",\r\n                              \"71\",\r\n                              \"72\",\r\n                              \"73\",\r\n                              \"74\",\r\n                              \"75\",\r\n                              \"76\",\r\n                              \"77\",\r\n                              \"78\",\r\n                              \"79\",\r\n                              \"80\",\r\n                              \"81\",\r\n                              \"82\",\r\n                              \"83\",\r\n                              \"84\",\r\n                              \"85\",\r\n                              \"86\",\r\n                              \"87\",\r\n                              \"88\",\r\n                              \"89\",\r\n                              \"90\",\r\n                              \"91\",\r\n                              \"92\",\r\n                              \"93\",\r\n                              \"94\",\r\n                              \"95\",\r\n                              \"96\",\r\n                              \"97\",\r\n                              \"98\",\r\n                              \"99\",\r\n                              \"100\",\r\n                            ]} // You can customize the options here\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                type=\"text\"\r\n                                label=\"Number of Openings\"\r\n                                variant=\"outlined\"\r\n                                error={field.openings.err}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                          <Autocomplete\r\n                            value={field.lookingFor.val}\r\n                            onChange={(event, newValue) => {\r\n                              handleJobDetailsFieldChange(\r\n                                field.id,\r\n                                \"lookingFor\",\r\n                                newValue\r\n                              );\r\n                              handleLookingForChange(field.id, newValue);\r\n                            }}\r\n                            clearIcon={null}\r\n                            style={{ margin: \"10px 0\" }}\r\n                            options={[\"Fresher\", \"Experienced\"]}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Looking For\"\r\n                                variant=\"outlined\"\r\n                                error={field.lookingFor.err}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-6\"></div>\r\n                      </div>\r\n\r\n                      {fields.length > 1 && (\r\n                        <Button\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                          onClick={() => removeField(field.id)}\r\n                        >\r\n                          <DeleteIcon /> Remove\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"mt-2\">\r\n                    <Button color=\"success\" onClick={addField}>\r\n                      {\" \"}\r\n                      + Add Requirements\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-6\"></div>\r\n                      <div className=\"col-sm-6\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"d-grid justify-content-center my-3\">\r\n                  <Button\r\n                    onClick={handleFormSubmit}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={enableSubmit}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </>\r\n          {showSuccess && (\r\n            <MyModal>\r\n              <ModalContainer\r\n                childComponent={\r\n                  <SuccessTick HeadText=\"Payment Updated Successfully\" />\r\n                }\r\n              />\r\n            </MyModal>\r\n          )}\r\n          {showConfirmPopup && (\r\n            <MyModal>\r\n              <ModalContainer\r\n                childComponent={\r\n                  <ConfirmationPopup\r\n                    heading={\"Confirmation\"}\r\n                    headingText={\r\n                      \"Are you sure you want to submit the Payment Update form?\"\r\n                    }\r\n                    onConfirm={ConfirmFormSubmit}\r\n                    enableSubmit={enableSubmit}\r\n                    onRequestClose={handleConfirmationClose}\r\n                  />\r\n                }\r\n              />\r\n            </MyModal>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployerPayment;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"payment_form_wrp\":\"UserPayment_payment_form_wrp__-FQwY\",\"error\":\"UserPayment_error__VnalO\"};","/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\nimport \"./candidatePayment.css\";\r\nimport style from \"./UserPayment.module.scss\";\r\nimport { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircleCheck } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nfunction CandidatePayment() {\r\n  //  const {register,handleSubmit,formState:{errors},trigger}=useForm();\r\n  //  console.log(errors);\r\n  // const initialValues = { username: \"\", email: \"\", password: \"\" };\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [orderid, setOrderid] = useState(\"\");\r\n  const [paymentid, setPaymentid] = useState(\"\");\r\n  const [Pusrchase, setPusrchase] = useState(\"\");\r\n  const [submissionStatus, setSubmissionStatus] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [userIdError, setuserIdError] = useState(\"\");\r\n  const [amountError, setAmountError] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [phoneError, setPhoneError] = useState(\"\");\r\n  const [orderidError, setOrderidError] = useState(\"\");\r\n  const [paymentidError, setPaymentidError] = useState(\"\");\r\n  const [PusrchaseError, setPusrchaseError] = useState(\"\");\r\n  //  const handleChange = (e) => {\r\n  //    e.preventDefault();\r\n\r\n  // };\r\n\r\n  async function postCandidatePayment() {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    var raw = JSON.stringify({\r\n      amount: amount,\r\n      emailId: email,\r\n      mobileNumber: phone,\r\n      orderId: orderid,\r\n      paymentId: paymentid,\r\n      status: \"payment successfull\",\r\n      typeOfPurchase: Pusrchase,\r\n      userId: userId,\r\n    });\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    setLoading(true);\r\n\r\n    fetch(\"h/ttps://dev.taizo.in/adminuserPayment\", requestOptions)\r\n      // .then((response) => response.text())\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          setSuccess(true);\r\n\r\n          // Reset form fields\r\n          setUserId(\"\");\r\n          setAmount(\"\");\r\n          setEmail(\"\");\r\n          setPhone(\"\");\r\n          setOrderid(\"\");\r\n          setPaymentid(\"\");\r\n          setPusrchase(\"\");\r\n        }\r\n      })\r\n      // .then((result) => console.log(result))\r\n      // .catch((error) => console.log(\"error\", error));\r\n      .catch((error) => {\r\n        console.error(\"API Error:\", error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    postCandidatePayment();\r\n    if (\r\n      userIdError ||\r\n      amountError ||\r\n      emailError ||\r\n      phoneError ||\r\n      orderidError ||\r\n      paymentidError ||\r\n      PusrchaseError\r\n    ) {\r\n      // Validation failed, do not submit\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    setTimeout(() => {\r\n      setSubmissionStatus(\"success\");\r\n      setIsLoading(false);\r\n    }, 2000);\r\n\r\n    setUserId(\"\");\r\n    setAmount(\"\");\r\n    setEmail(\"\");\r\n    setPhone(\"\");\r\n    setOrderid(\"\");\r\n    setPaymentid(\"\");\r\n    setPusrchase(\"\");\r\n    //   setFormErrors(validate(formValues));\r\n    // setIsSubmit(true);\r\n  };\r\n\r\n  const validateuserId = () => {\r\n    if (userId.length < 1 || userId.length > 5) {\r\n      setuserIdError(\"please Enter 1 to 5 numbers\");\r\n    } else {\r\n      setuserIdError(\"\");\r\n    }\r\n  };\r\n  const validateamount = () => {\r\n    if (!amount.match(/^\\d+$/)) {\r\n      setAmountError(\"Please Enter your amount\");\r\n    } else {\r\n      setAmountError(\"\");\r\n    }\r\n  };\r\n  const validateEmail = () => {\r\n    if (!email.match(/^[A-Za-z\\\\._\\-0-9]*[@][A-Za-z]*[\\\\.][a-z]{2,4}$/)) {\r\n      setEmailError(\"Please Enter a valid email\");\r\n    } else {\r\n      setEmailError(\"\");\r\n    }\r\n  };\r\n  const validatephone = () => {\r\n    if (\r\n      !phone.match(/^[+]?(\\d{1,2})?[\\s.-]?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/)\r\n    ) {\r\n      setPhoneError(\"Please Enter a valid mobile number\");\r\n    } else {\r\n      setPhoneError(\"\");\r\n    }\r\n  };\r\n  const validateorderId = () => {\r\n    if (orderid.length == 0) {\r\n      setOrderidError(\"Please Enter a order id\");\r\n    } else {\r\n      setOrderidError(\"\");\r\n    }\r\n  };\r\n  const validatepaymentid = () => {\r\n    if (paymentid.length == 0) {\r\n      setPaymentidError(\"Please Enter a payment id\");\r\n    } else {\r\n      setPaymentidError(\"\");\r\n    }\r\n  };\r\n  const validatePurchase = () => {\r\n    if (Pusrchase.length == 0) {\r\n      setPusrchaseError(\"Please Enter a purchase\");\r\n    } else {\r\n      setPusrchaseError(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${style.payment_form_wrp}`}>\r\n      <div>\r\n        {/*Loder*/}\r\n        {isLoading && (\r\n          <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"loading-spinner\"></div>\r\n              <h3 className=\"mt-2\">Loading...</h3>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {submissionStatus === \"success\" && (\r\n          <div className=\"modal\">\r\n            <div className=\"modal-content text-center\">\r\n              <h3 className=\"text-success\">Success!</h3>\r\n              <div className=\"success-icon\">\r\n                <FontAwesomeIcon icon={faCircleCheck} />\r\n              </div>\r\n              <p className=\"para\" assName=\"text-dark\">\r\n                Payment submitted successfully!\r\n              </p>\r\n              <button\r\n                className=\"btn btn-success w-50 text-center\"\r\n                onClick={() => setSubmissionStatus(null)}\r\n              >\r\n                ok\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* <div className='d-flex justify-content-center align-items-center'> */}\r\n        <form onSubmit={handleSubmit}>\r\n          {/* {submissionStatus === 'success' && (\r\n        <div className=\"success-message\">\r\n          Form submitted successfully!\r\n          </div>\r\n      )} */}\r\n          <div className=\"container ms-5 me-5\">\r\n            <div class=\"row \">\r\n              <div className=\"col-sm-6\">\r\n                <label>Jobseeker User ID</label>\r\n                <input\r\n                  type=\"number\"\r\n                  placeholder=\"Userid\"\r\n                  aria-label=\"Userid\"\r\n                  name=\"userid\"\r\n                  className=\"form-control\"\r\n                  required\r\n                  value={userId}\r\n                  onChange={(e) => setUserId(e.target.value)}\r\n                  onBlur={validateuserId}\r\n                />\r\n                {/* <p className=\"para\">{formErrors.userid}</p> */}\r\n                {userIdError && <p className=\"para\">{userIdError}</p>}\r\n              </div>\r\n\r\n              <div className=\"col-sm-6\">\r\n                <label>Amount</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Amount\"\r\n                  aria-label=\"amount\"\r\n                  name=\"amount\"\r\n                  required\r\n                  value={amount}\r\n                  onChange={(e) => setAmount(e.target.value)}\r\n                  onBlur={validateamount}\r\n                />\r\n                {amountError && <p className=\"para\">{amountError}</p>}\r\n                {/* <p className=\"para\">{formErrors.amount}</p> */}\r\n              </div>\r\n            </div>\r\n            <div class=\"row mt-1\">\r\n              <div className=\"col-sm-6\">\r\n                <label>Email ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"EmailId\"\r\n                  aria-label=\"emailId\"\r\n                  className=\"form-control\"\r\n                  name=\"email\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  onBlur={validateEmail}\r\n                />\r\n                {emailError && <p className=\"para\">{emailError}</p>}\r\n                {/* <p className=\"para\">{formErrors.email}</p> */}\r\n              </div>\r\n\r\n              <div className=\"col-sm-6\">\r\n                <label>Mobile Number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"MobileNumber\"\r\n                  aria-label=\"mobileNumber\"\r\n                  name=\"phone\"\r\n                  required\r\n                  value={phone}\r\n                  onChange={(e) => setPhone(e.target.value)}\r\n                  onBlur={validatephone}\r\n                />\r\n                {phoneError && <p className=\"para\">{phoneError}</p>}\r\n                {/* <p className=\"para\">{formErrors.Mnumber}</p> */}\r\n              </div>\r\n            </div>\r\n            <div class=\"row mt-1\">\r\n              <div className=\"col-sm-6\">\r\n                <label>Order ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"OrderId\"\r\n                  aria-label=\"orderId\"\r\n                  name=\"orderId\"\r\n                  required\r\n                  value={orderid}\r\n                  onChange={(e) => setOrderid(e.target.value)}\r\n                  onBlur={validateorderId}\r\n                />\r\n                {orderidError && <p className=\"para\">{orderidError}</p>}\r\n                {/* <p className=\"para\">{formErrors.orderId}</p> */}\r\n              </div>\r\n\r\n              <div className=\"col-sm-6\">\r\n                <label>Payment ID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  placeholder=\"PaymentId\"\r\n                  aria-label=\"paymentId\"\r\n                  name=\"paymentId\"\r\n                  required\r\n                  value={paymentid}\r\n                  onChange={(e) => setPaymentid(e.target.value)}\r\n                  onBlur={validatepaymentid}\r\n                />\r\n                {paymentidError && <p className=\"para\">{paymentidError}</p>}\r\n                {/* <p className=\"para\">{formErrors.paymentId}</p> */}\r\n              </div>\r\n            </div>\r\n            <div class=\"row mt-1\">\r\n              <div className=\"col-sm-6\">\r\n                <label>Type Of Purchase</label>\r\n                <input\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  placeholder=\"Purchase\"\r\n                  aria-label=\"Purchase\"\r\n                  name=\"Purchase\"\r\n                  required\r\n                  value={Pusrchase}\r\n                  onChange={(e) => setPusrchase(e.target.value)}\r\n                  onBlur={validatePurchase}\r\n                />\r\n                {PusrchaseError && <p className=\"para\">{PusrchaseError}</p>}\r\n                {/* <p className=\"para\">{formErrors.Purchase}</p> */}\r\n              </div>\r\n\r\n              <div className=\"col-sm-6 mt-4\">\r\n                <input\r\n                  type=\"radio\"\r\n                  // onChange={input_handler}\r\n                  className=\"\"\r\n                  name=\"payment_status\"\r\n                  id=\"payment_status_success\"\r\n                  value=\"Payment Successfull\"\r\n                  checked\r\n                  // ={\r\n                  //   formValues.payment_status === \"Payment Successfull\"\r\n                  // }\r\n                />\r\n                <label\r\n                  className=\"me-4 text-success\"\r\n                  htmlFor=\"payment_status_success\"\r\n                >\r\n                  Payment Success\r\n                </label>\r\n                <input\r\n                  type=\"radio\"\r\n                  // onChange={input_handler}\r\n                  className=\"\"\r\n                  name=\"payment_status\"\r\n                  id=\"payment_status_failure\"\r\n                  value=\"Payment Failed\"\r\n                  // checked={\r\n                  //   paymentInputs.payment_status.val === \"Payment Failed\"\r\n                  // }\r\n                />\r\n                <label className=\"text-danger\" htmlFor=\"payment_status_failure\">\r\n                  Payment Failure\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row  d-grid justify-content-end mt-1 mr-5\">\r\n              <div className=\"col-sm-12\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn btn-success\"\r\n                  disabled={loading}\r\n                >\r\n                  {loading ? \"Loading...\" : \"Submit\"}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default CandidatePayment;\r\n","/* eslint-disable eqeqeq */\r\nimport { useState } from \"react\";\r\nimport PaymentFrom from \"./employerPayment\";\r\nimport CandidatePayment from \"./candidatePayment\";\r\nimport style from \"../../assets/common.module.scss\";\r\n\r\nconst PaymentContainer = () => {\r\n  const [paymentType, setPaymentType] = useState({\r\n    employer: false,\r\n    jobseeker: false,\r\n  });\r\n  function handleFormChange(tab) {\r\n    if (tab == \"employer\") {\r\n      setPaymentType((prev) => ({ ...prev, employer: true, jobseeker: false }));\r\n    } else {\r\n      setPaymentType((prev) => ({ ...prev, employer: false, jobseeker: true }));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"my-4\">\r\n        <div className=\"text-center\">\r\n          <div>\r\n            <h4>Custom Payment</h4>\r\n          </div>\r\n          <form className={`${style.chips_wrp}`}>\r\n            <input\r\n              onChange={() => {\r\n                handleFormChange(\"employer\");\r\n              }}\r\n              type=\"radio\"\r\n              name=\"payment_switch\"\r\n              id=\"employer_form_switch\"\r\n            />\r\n\r\n            <label htmlFor=\"employer_form_switch\">Employer</label>\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          {paymentType.employer && <PaymentFrom />}\r\n          {paymentType.jobseeker && <CandidatePayment />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cancel_btn\":\"common_cancel_btn__lIFK8\",\"close_btn\":\"common_close_btn__jWROV\",\"redDot\":\"common_redDot__K4DVN\",\"form-group\":\"common_form-group__q6L++\",\"error\":\"common_error__TcCqJ\",\"chips_wrp\":\"common_chips_wrp__t4tLs\",\"scrollbar-primary\":\"common_scrollbar-primary__CEgK7\",\"force-overflow\":\"common_force-overflow__ojfAR\",\"rotateIcon\":\"common_rotateIcon__Ck+f7\",\"rotate\":\"common_rotate__mp7Rm\",\"OR_container\":\"common_OR_container__FhYXa\"};"],"names":["EmployerPayment","options","setOptions","useState","industries","jobRoles","idCounter","useRef","fields","setFields","id","current","jobRole","val","err","industry","openings","lookingFor","amount","jobDetails","setJobDetails","formData","setFormData","employerID","paymentID","paymentMethod","chequeDate","Date","chequeNo","enableSubmit","setEnableSubmit","showSuccess","setShowSuccess","showConfirmPopup","setShowConfirmPopup","errors","setErrors","useEffect","getJobIndustries","then","data","results","map","el","prev","getJobRole","validateFields","valid","forEach","field","index","updatedField","console","log","updatedFields","handleJobDetailsFieldChange","fieldKey","value","isNaN","handleFieldChange","prevData","jobdetailsArray","jobCategory","noOfOpenings","isExperienced","handleFormSubmit","event","preventDefault","noError","prevErrors","Object","keys","every","key","_jsx","_Fragment","children","className","_jsxs","concat","style","onSubmit","TextField","label","variant","onChange","newValue","target","fullWidth","margin","error","Boolean","helperText","inputProps","maxLength","Autocomplete","e","handlePaymentMethodChange","name","clearIcon","renderInput","params","required","InputLabelProps","sx","width","handleChequeNoChange","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","handleDateChange","$d","slotProps","textField","handleAmountChange","getOptionLabel","option","filterSelectedOptions","type","fieldToUpdate","filter","handleLookingForChange","length","Button","color","onClick","removeField","DeleteIcon","addField","newField","disabled","MyModal","ModalContainer","childComponent","SuccessTick","HeadText","ConfirmationPopup","heading","headingText","onConfirm","PostPaymentDetails","statuscode","code","alert","setTimeout","onRequestClose","userId","setUserId","setAmount","email","setEmail","phone","setPhone","orderid","setOrderid","paymentid","setPaymentid","Pusrchase","setPusrchase","submissionStatus","setSubmissionStatus","isLoading","setIsLoading","loading","setLoading","success","setSuccess","userIdError","setuserIdError","amountError","setAmountError","emailError","setEmailError","phoneError","setPhoneError","orderidError","setOrderidError","paymentidError","setPaymentidError","PusrchaseError","setPusrchaseError","FontAwesomeIcon","icon","faCircleCheck","assName","async","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","emailId","mobileNumber","orderId","paymentId","status","typeOfPurchase","redirect","fetch","response","ok","catch","finally","postCandidatePayment","class","placeholder","onBlur","validateuserId","validateamount","match","validateEmail","validatephone","validateorderId","validatepaymentid","validatePurchase","checked","htmlFor","PaymentContainer","paymentType","setPaymentType","employer","jobseeker","chips_wrp","PaymentFrom","CandidatePayment"],"sourceRoot":""}