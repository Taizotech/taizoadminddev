{"version":3,"file":"static/js/525.5975b43c.chunk.js","mappings":"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","sources":["pages/Employer/EmployerRegisterTable/EmployerRegisterFilter.js","pages/Employer/EmployerRegisterTable/EmployerRegiterTable.js","webpack://admin-login-react/./src/pages/Candidate/CandidateRegistered/RegisteredCandidate.module.scss?bc2f"],"sourcesContent":["/* eslint-disable default-case */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { AiOutlineClose, AiOutlinePhone } from \"react-icons/ai\";\r\nimport FBStyle from \"../../Candidate/FacebookMeta/candidateFacebookMeta.module.scss\";\r\nimport { EmployerRegisterActions } from \"../../../redux-store/store\";\r\nimport {\r\n  Autocomplete,\r\n  FormControl,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { MyModal, numbersOnlyTest } from \"../../../utility\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Stack } from \"rsuite\";\r\nimport { BiFilterAlt } from \"react-icons/bi\";\r\nimport { getJobFilterOptions } from \"../../../apiServices\";\r\nfunction EmployerRegisterFilter() {\r\n  const EmployerRegisterFilter = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter\r\n  );\r\n  const EmployerRegisterFilterRedDot = useSelector(\r\n    (state) => state.EmployerRegisterDetails.refreshRedDot\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter.size\r\n  );\r\n  const create = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter.createdTime\r\n  );\r\n  const ended = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter.endDate\r\n  );\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [showRedDot, setShowRedDot] = useState(false);\r\n  const initialState = {\r\n    companyName: EmployerRegisterFilter.companyName,\r\n    contactNumber: EmployerRegisterFilter.contactNumber,\r\n    industry: EmployerRegisterFilter.industry,\r\n    city: EmployerRegisterFilter.city,\r\n    area: EmployerRegisterFilter.area,\r\n    createdTime: EmployerRegisterFilter.createdTime,\r\n    endDate: EmployerRegisterFilter.endDate,\r\n  };\r\n  const [formData, setFormData] = useState(initialState);\r\n  const Dispatch = useDispatch();\r\n  const [options, setOptions] = useState({\r\n    city: [],\r\n    area: [],\r\n    industry: [],\r\n  });\r\n  const [dateRange, setDateRange] = useState({\r\n    start: EmployerRegisterFilter.createdTime,\r\n    end: EmployerRegisterFilter.endDate,\r\n    dateFilterType: EmployerRegisterFilter.dateFilterType,\r\n  });\r\n  const [showCustom, setshowCustom] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState({\r\n    start: false,\r\n    end: false,\r\n  });\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    console.log(val);\r\n\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date();\r\n    // endDate.setDate(endDate.getDate() + 1);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const startDate = new Date();\r\n\r\n      startDate.setDate(today.getDate() - 7);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const startDate = new Date();\r\n      startDate.setMonth(startDate.getMonth() - 1);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const startDate = new Date(today);\r\n      startDate.setDate(today.getDate() - 13);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom(true);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n  function handleCustomDate(value, type) {\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n  const isFormValid = () => {\r\n    // Implement your validation logic here\r\n    // For example, you can check if both start and end dates are filled\r\n    const isValid = dateRange.start && dateRange.end;\r\n\r\n    if (!dateRange.start) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: true,\r\n      }));\r\n    }\r\n\r\n    if (!dateRange.end) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: true,\r\n      }));\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleApplyCustomDate = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isFormValid()) {\r\n      // Your submit logic here\r\n      // Proceed with form submission\r\n      console.log(\"Form submitted:\", dateRange);\r\n      setValidationErrors({\r\n        start: false,\r\n        end: false,\r\n      });\r\n      setshowCustom(false); // Close the modal or perform other actions\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    getJobFilterOptions().then((data) => {\r\n      const IndustryOptions = data.filter((el) => el.category == \"industry\");\r\n      const cityOptions = data.filter((element) => element.category === \"city\");\r\n      const areaOptions = data.filter(\r\n        (element) => element.category === \"areas\"\r\n      );\r\n      setOptions((prev) => ({\r\n        ...prev,\r\n        city: cityOptions,\r\n        area: areaOptions,\r\n        industry: IndustryOptions,\r\n        //   jobCategory: JobCategoryOptions,\r\n      }));\r\n      console.log(IndustryOptions);\r\n    });\r\n  }, []);\r\n  const updateArea = (event) => {\r\n    // to update cities\r\n    console.log(event, \"jhjhjkhjh\");\r\n    setFormData({ ...formData, area: event });\r\n  };\r\n  const updateCity = (event) => {\r\n    // to update cities\r\n    console.log(event, \"jhjhjkhjh\");\r\n    setFormData({ ...formData, city: event.options });\r\n  };\r\n  const updateIndustry = (event) => {\r\n    // to update cities\r\n    console.log(event, \"jhjhjkhjh\");\r\n    setFormData({ ...formData, industry: event.options });\r\n  };\r\n\r\n  function handleFieldChange(field, value) {\r\n    switch (field) {\r\n      case \"contactNumber\":\r\n        if (numbersOnlyTest(value)) {\r\n          setFormData({ ...formData, [field]: value });\r\n        }\r\n        break;\r\n      case \"companyName\":\r\n        setFormData({ ...formData, [field]: value });\r\n        break;\r\n    }\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      EmployerRegisterActions.setEmployerRegisterFilter({\r\n        ...formData,\r\n        createdTime: dateRange.start || create,\r\n        endDate: dateRange.end || ended,\r\n        page: 1,\r\n        size: size,\r\n        dateFilterType: dateRange.dateFilterType || \"\",\r\n      })\r\n    );\r\n    const isFilterApplied =\r\n      formData.area ||\r\n      formData.city ||\r\n      formData.companyName ||\r\n      formData.contactNumber ||\r\n      formData.industry ||\r\n      dateRange.start ||\r\n      dateRange.end;\r\n\r\n    Dispatch(\r\n      EmployerRegisterActions.setEmployerRegisterRedDot(isFilterApplied)\r\n    );\r\n    // if (isFilterApplied) {\r\n    //   setShowRedDot(true);\r\n    // } else {\r\n    //   setShowRedDot(false);\r\n    // }\r\n    setShowFilter(false);\r\n    // setDateRange({ start: \"\", end: \"\" });\r\n  };\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n    setFormData({\r\n      companyName: \"\",\r\n      contactNumber: \"\",\r\n      industry: \"\",\r\n      city: \"\",\r\n      area: \"\",\r\n      createdTime: \"\",\r\n      endDate: \"\",\r\n    });\r\n    // setSelectedValue(\"\");\r\n    setDateRange({\r\n      start: null,\r\n      end: null,\r\n      dateFilterType: \"\",\r\n    });\r\n    setShowRedDot(false);\r\n\r\n    Dispatch(\r\n      EmployerRegisterActions.setEmployerRegisterFilter({\r\n        ...initialState,\r\n        createdTime: \"\",\r\n        endDate: \"\",\r\n        page: 1,\r\n        size: size,\r\n        dateFilterType: \"\",\r\n      })\r\n    );\r\n  }\r\n  function handleClickCross(e) {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      EmployerRegisterActions.setEmployerRegisterFilter({\r\n        ...formData,\r\n        page: 1,\r\n        size: size,\r\n        createdTime: create,\r\n        endDate: ended,\r\n        dateFilterType: dateRange.dateFilterType,\r\n      })\r\n    );\r\n    setShowFilter(false);\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button\r\n          className={`rounded-pill d-flex align-items-center ${FBStyle.Filterbutton}`}\r\n          variant=\"contained\"\r\n          onClick={() => setShowFilter(true)}\r\n        >\r\n          <BiFilterAlt />{\" \"}\r\n          <p\r\n            style={{\r\n              backgroundColor: EmployerRegisterFilterRedDot\r\n                ? \"red\"\r\n                : \"transparent\",\r\n              width: \"8px\",\r\n              height: \"8px\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          ></p>{\" \"}\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {showFilter && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <>\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <h4 className=\"text-center mb-2\">Filter by</h4>\r\n                  <h3>\r\n                    <span\r\n                      onClick={handleClickCross}\r\n                      className=\"btn btn-outline-danger\"\r\n                      style={{ cursor: \"pointer\", fontSize: 15 }}\r\n                    >\r\n                      <AiOutlineClose />\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div className={`${FBStyle.BoxContainerWidth}`}>\r\n                  <>\r\n                    <form\r\n                      onSubmit={(e) => {\r\n                        handleSubmit(e);\r\n                      }}\r\n                    >\r\n                      <Stack className=\"mt-1\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <TextField\r\n                              id=\"outlined-basic\"\r\n                              label=\"Mobile number\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              value={formData.contactNumber}\r\n                              // inputProps={{ maxLenth: 10 }}\r\n                              onChange={(event) =>\r\n                                handleFieldChange(\r\n                                  \"contactNumber\",\r\n                                  event.target.value\r\n                                )\r\n                              }\r\n                              inputProps={{ maxLength: 10 }}\r\n                              InputProps={{\r\n                                startAdornment: (\r\n                                  <span\r\n                                    style={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    <AiOutlinePhone\r\n                                      style={{ marginRight: \"5px\" }}\r\n                                    />{\" \"}\r\n                                    +91\r\n                                  </span>\r\n                                ),\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <FormControl variant=\"outlined\" fullWidth>\r\n                              <TextField\r\n                                label=\"Created on\"\r\n                                id=\"basic-button\"\r\n                                value={`${dateRange.dateFilterType}`}\r\n                                // value={`${dateRange.start} - ${dateRange.end}`}\r\n                                aria-controls={open ? \"basic-menu\" : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                aria-expanded={open ? \"true\" : undefined}\r\n                                onClick={handleClick}\r\n                              ></TextField>\r\n                              <Menu\r\n                                id=\"basic-menu\"\r\n                                anchorEl={anchorEl}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                fullWidth\r\n                                MenuListProps={{\r\n                                  \"aria-labelledby\": \"basic-button\",\r\n                                }}\r\n                                style={{ width: \"100%\" }}\r\n                              >\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"today\");\r\n                                  }}\r\n                                  style={{ width: \"250px\" }}\r\n                                >\r\n                                  Today\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastWeek\");\r\n                                  }}\r\n                                >\r\n                                  Last 1 Week\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastTwoWeeks\");\r\n                                  }}\r\n                                >\r\n                                  Last 2 Week\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastMonth\");\r\n                                  }}\r\n                                >\r\n                                  Last Month\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"custom\");\r\n                                  }}\r\n                                >\r\n                                  Custom Date\r\n                                </MenuItem>\r\n                              </Menu>\r\n                            </FormControl>\r\n\r\n                            {showCustom && (\r\n                              <MyModal>\r\n                                <ModalContainer\r\n                                  zIndex={1005}\r\n                                  childComponent={\r\n                                    <div\r\n                                      style={{\r\n                                        minWidth: \"400px\",\r\n                                        width: \"auto\",\r\n                                      }}\r\n                                    >\r\n                                      <>\r\n                                        <div>\r\n                                          <form>\r\n                                            <p className=\"text-center \">\r\n                                              Select Custom Date{\" \"}\r\n                                            </p>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"start\">\r\n                                                From\r\n                                              </label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.start\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"start\"\r\n                                                onChange={(value) =>\r\n                                                  handleCustomDate(\r\n                                                    value,\r\n                                                    \"startDate\"\r\n                                                  )\r\n                                                }\r\n                                                value={dateRange.start}\r\n                                                name=\"trip-start\"\r\n                                                min=\"2020-01-01\"\r\n                                                max={\r\n                                                  new Date()\r\n                                                    .toISOString()\r\n                                                    .split(\"T\")[0]\r\n                                                }\r\n                                              />\r\n                                              {validationErrors.start && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  Start date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"end\">To</label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.end\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                value={dateRange.end}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"end\"\r\n                                                onChange={(value) =>\r\n                                                  handleCustomDate(\r\n                                                    value,\r\n                                                    \"endDate\"\r\n                                                  )\r\n                                                }\r\n                                                name=\"trip-end\"\r\n                                                min=\"2020-01-01\"\r\n                                                max={\r\n                                                  new Date()\r\n                                                    .toISOString()\r\n                                                    .split(\"T\")[0]\r\n                                                }\r\n                                              />\r\n                                              {validationErrors.end && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  End date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-end mt-3 \">\r\n                                              <button\r\n                                                onClick={() => {\r\n                                                  setValidationErrors({\r\n                                                    start: false,\r\n                                                    end: false,\r\n                                                  });\r\n                                                  setshowCustom(false);\r\n                                                }}\r\n                                                style={{\r\n                                                  backgroundColor: \"#b2261c\",\r\n                                                }}\r\n                                                className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                              >\r\n                                                Close\r\n                                              </button>\r\n                                              <button\r\n                                                onClick={handleApplyCustomDate}\r\n                                                // color=\"primary\"\r\n                                                className=\"btn rounded-pill text-white px-4\"\r\n                                                style={{\r\n                                                  backgroundColor: \"#169C50\",\r\n                                                }}\r\n                                              >\r\n                                                Apply\r\n                                              </button>\r\n                                            </div>\r\n                                          </form>\r\n                                        </div>\r\n                                      </>\r\n                                    </div>\r\n                                  }\r\n                                />\r\n                              </MyModal>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <TextField\r\n                              fullWidth\r\n                              label=\"Company Name\"\r\n                              name=\"companyName\"\r\n                              placeholder=\"Company Name\"\r\n                              value={formData.companyName}\r\n                              onChange={(event) =>\r\n                                handleFieldChange(\r\n                                  \"companyName\",\r\n                                  event.target.value\r\n                                )\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <Autocomplete\r\n                              name=\"industries\"\r\n                              id=\"tags-outlined\"\r\n                              onChange={(event, value, reason) => {\r\n                                if (reason === \"clear\") {\r\n                                  console.log(\"Selection cleared\");\r\n                                  updateIndustry(\"\");\r\n                                } else {\r\n                                  updateIndustry(value);\r\n                                  console.log(value, \"value jobs\");\r\n                                }\r\n                              }}\r\n                              options={options.industry.map((option) => option)}\r\n                              getOptionLabel={(option) => `${option.options}`}\r\n                              filterSelectedOptions\r\n                              value={{\r\n                                options: formData.industry\r\n                                  ? formData.industry\r\n                                  : \"\",\r\n                                category: \"industry\",\r\n                              }}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"Industry\"\r\n                                  placeholder=\"Industry\"\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            {\" \"}\r\n                            <Autocomplete\r\n                              id=\"tags-outlined\"\r\n                              options={options.area.map((option) => option)}\r\n                              getOptionLabel={(option) => `${option.options}`}\r\n                              onChange={(event, value, reason) => {\r\n                                if (reason === \"clear\") {\r\n                                  console.log(\"Selection cleared\");\r\n                                  updateArea(\"\");\r\n                                } else {\r\n                                  updateArea(value ? value.options : \"\");\r\n                                  console.log(value, \"value jobs\");\r\n                                }\r\n                              }}\r\n                              value={{\r\n                                options: formData.area ? formData.area : \"\",\r\n                                category: \"areas\",\r\n                              }}\r\n                              fullWidth\r\n                              filterSelectedOptions\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"Area\"\r\n                                  placeholder=\"Area\"\r\n                                  value={formData.area}\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-4 mt-3\">\r\n                            <Autocomplete\r\n                              id=\"tags-outlined\"\r\n                              options={options.city.map((option) => option)}\r\n                              getOptionLabel={(option) => `${option.options}`}\r\n                              // onChange={(event, value) => {\r\n                              //   updateCity(value);\r\n                              //   // console.log(value);\r\n                              // }}\r\n                              onChange={(event, value, reason) => {\r\n                                if (reason === \"clear\") {\r\n                                  console.log(\"Selection cleared\");\r\n                                  updateCity(\"\");\r\n                                } else {\r\n                                  updateCity(value);\r\n                                  console.log(value, \"value jobs\");\r\n                                }\r\n                              }}\r\n                              value={{\r\n                                options: formData.city ? formData.city : \"\",\r\n                                category: \"city\",\r\n                              }}\r\n                              fullWidth\r\n                              filterSelectedOptions\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"City\"\r\n                                  placeholder=\"City\"\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"d-flex flex-row gap-2 justify-content-end mt-4\">\r\n                          <button\r\n                            className={`rounded-pill ${FBStyle.Filterbutton}`}\r\n                            variant=\"outlined\"\r\n                            onClick={(e) => {\r\n                              handleClear(e);\r\n                            }}\r\n                          >\r\n                            Clear All\r\n                          </button>\r\n                          <button\r\n                            className={`rounded-pill ${FBStyle.search}`}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ minWidth: \"150px\" }}\r\n                          >\r\n                            Search\r\n                            {/* {!formData.loading && !formData.completed && \"Search\"}\r\n\r\n                          {\r\n                            formData.loading && (\r\n                              <div className=\"spinner-border spinner-border-sm text-light\"></div>\r\n                            ) // Add spinner here\r\n                          }\r\n                          {formData.completed && \"Submitted\"} */}\r\n                          </button>\r\n                        </div>\r\n                      </Stack>\r\n                    </form>\r\n                  </>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployerRegisterFilter;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable react/jsx-pascal-case */\r\n/* eslint-disable react/jsx-no-target-blank */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport {\r\n  Pagination,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  tableCellClasses,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FBstyle from \"../../Candidate/FacebookMeta/candidateFacebookMeta.module.scss\";\r\nimport EmployerRegisterFilter from \"./EmployerRegisterFilter\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  GetAllsdminDetails,\r\n  GetEmployerFilterDetails,\r\n  PutEmployerIsQualified,\r\n} from \"../../../apiServices\";\r\nimport RegisterCandidateStyle from \"../../Candidate/CandidateRegistered/RegisteredCandidate.module.scss\";\r\nimport canLeadStyle from \"../../Candidate/CandidateLeadTable/candidateLead.module.scss\";\r\nimport {\r\n  DDMMYYYY_formate,\r\n  MyModal,\r\n  capitalizeWords,\r\n  textTruncate,\r\n} from \"../../../utility\";\r\nimport {\r\n  EmployerRegisterActions,\r\n  commonPopupActions,\r\n} from \"../../../redux-store/store\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport { AiOutlineUserAdd } from \"react-icons/ai\";\r\nimport { GoDotFill } from \"react-icons/go\";\r\nimport ConfirmationPopup from \"../../../components/ModalPopups/confirmationPopup\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { webConsoleBaseUrl } from \"../../../App\";\r\nimport EmployerEmailSendSLA from \"./EmployerSendEmail\";\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#d2d2d2\",\r\n    color: \"#545454f0\",\r\n    padding: \"8px\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    padding: \"8px\",\r\n  },\r\n}));\r\nexport default function EmployerRegiterTable(props) {\r\n  const EmployerRegister = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter\r\n  );\r\n  const page = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter.page\r\n  );\r\n  const size = useSelector(\r\n    (state) => state.EmployerRegisterDetails.EmployerRegisterFilter.size\r\n  );\r\n  console.log(page, \"skdklklpage\");\r\n  const Dispatch = useDispatch();\r\n  const [currentCandidateDetail, setCurrentCandidateDetails] = useState();\r\n  const [pageCount, setPageCount] = useState();\r\n  const [EmployerRegisterList, setEmployerRegisterList] = useState([]);\r\n  const [pagesCount, setPagesCount] = useState({\r\n    totalPages: 0,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n  });\r\n  const [enableSubmit, setEnableSubmit] = useState(false);\r\n  const [showConfirmationPopup, setShowConfirmPopup] = useState(false);\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n  const [showEmployerSendSLA, setShowEmployerSendSLA] = useState(false);\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n  const [adminName, setAdminName] = useState([]);\r\n  const [adminid, setAdminId] = useState([]);\r\n  const [regisercount, setRegisercount] = useState();\r\n\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n      const adminNames = data.map((item) => item.userName);\r\n      const adminIds = data.map((item) => item.id);\r\n      setAdminName(adminNames);\r\n      setAdminId(adminIds);\r\n    });\r\n  }, []);\r\n  const inputRef = {\r\n    qualified: useRef(),\r\n    notQualified: useRef(),\r\n    // rescheduled: useRef(),\r\n  };\r\n  const handleButtonClick = (refName, employerId) => {\r\n    const ref = inputRef[refName];\r\n    if (ref && ref.current) {\r\n      ref.current.click();\r\n      console.log(employerId, \"refcurrent\");\r\n    }\r\n  };\r\n  function currentCanDetails(data) {\r\n    console.log(data, \"Current Dataaaaaa\");\r\n    setCurrentCandidateDetails(data);\r\n  }\r\n\r\n  //   const EmpId = currentCandidateDetail.id;\r\n  //   console.log(EmpId, \"EmpId\");\r\n\r\n  const [isQualifiedDetails, setIsQualifiedDetails] = useState({\r\n    confirmtext: \"\",\r\n    isQualified: \"\",\r\n    openPopup: false,\r\n    empId: \"\",\r\n  });\r\n\r\n  function openIsQualifyPopup(status, id) {\r\n    console.log(status, \"staus\");\r\n    let confirmText = \"\";\r\n    let isQualified;\r\n    if (status == \"qualify\") {\r\n      confirmText = `Are you sure you want to qualify <b>${currentCandidateDetail.contactPersonName}</b> `;\r\n      isQualified = true;\r\n    } else {\r\n      confirmText = `Are you sure you want to not qualify <b>${currentCandidateDetail.contactPersonName}</b> `;\r\n      isQualified = false;\r\n    }\r\n    setIsQualifiedDetails((prev) => ({\r\n      ...prev,\r\n      openPopup: true,\r\n      isQualified: isQualified,\r\n      confirmtext: confirmText,\r\n      empId: currentCandidateDetail.id,\r\n    }));\r\n  }\r\n\r\n  function handleConfirmationClose() {\r\n    setIsQualifiedDetails((prev) => ({\r\n      ...prev,\r\n      openPopup: false,\r\n    }));\r\n  }\r\n\r\n  function ConfirmFormSubmit() {\r\n    setEnableSubmit(true);\r\n    PutEmployerIsQualified(isQualifiedDetails)\r\n      .then((data) => {\r\n        setIsQualifiedDetails((prev) => ({\r\n          ...prev,\r\n          openPopup: false,\r\n        }));\r\n        GetEmployerFilterDetails(EmployerRegister).then((data) => {\r\n          setEmployerRegisterList(data.employerList);\r\n          setPageCount(Math.ceil(data.totalCount / EmployerRegister.size));\r\n          setPagesCount({\r\n            totalPages: Math.ceil(data.totalCount / EmployerRegister.size),\r\n            totalCount: data.totalCount,\r\n            currentPage: EmployerRegister.page,\r\n          });\r\n        });\r\n        setEnableSubmit(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    console.log(EmployerRegister, \"Employerrrrrr\");\r\n  }, [EmployerRegister]);\r\n  //   useEffect(() => {\r\n  //     GetEmployerFilterDetails(EmployerRegister).then((data) => {\r\n  //       //   setLoading(false);\r\n  //       console.log(data);\r\n  //       if (data.code === 400) {\r\n  //         setEmployerRegisterList([]);\r\n  //       } else {\r\n  //         setEmployerRegisterList(data.employerList);\r\n  //         setPageCount(data.totalCount); // Set totalCount directly\r\n  //       }\r\n  //     });\r\n  //   }, [EmployerRegister]);\r\n  useEffect(() => {\r\n    GetEmployerFilterDetails(EmployerRegister).then((data) => {\r\n      setEmployerRegisterList(data.employerList);\r\n      setRegisercount(data.totalCount);\r\n      setPageCount(Math.ceil(data.totalCount / EmployerRegister.size));\r\n    });\r\n  }, [EmployerRegister]);\r\n\r\n  // function candidatePagination(event, page) {\r\n  //   Dispatch(EmployerRegisterActions.setEmployerRegisterFilterPage(page));\r\n  // }\r\n  //   function currentCanDetails(data) {\r\n  //     console.log(data, \"Current Dataaaaaa\");\r\n  //     setCurrentCandidateDetails(data);\r\n  //   }\r\n  function candidatePagination(event, page) {\r\n    const currentPage = page;\r\n    console.log(event, \"current page\");\r\n    Dispatch(\r\n      EmployerRegisterActions.setEmployerRegisterFilterPage(currentPage)\r\n    );\r\n  }\r\n  function candidateSize(size) {\r\n    Dispatch(EmployerRegisterActions.setEmployerRegisterFilterSize(size));\r\n  }\r\n  const handlePopupDetails = (id, type) => {\r\n    console.log(id);\r\n\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: type,\r\n        id: id,\r\n      })\r\n    );\r\n  };\r\n  const closeSLA = () => {\r\n    setShowEmployerSendSLA(false);\r\n  };\r\n  return (\r\n    <div>\r\n      <>\r\n        <div className={`${FBstyle.FilterHead}`}>\r\n          {\" \"}\r\n          <div className=\"d-flex \">\r\n            Show {\"  \"}\r\n            <select\r\n              name=\"\"\r\n              id=\"\"\r\n              className=\"px-1 py-1 mx-2\"\r\n              onChange={(event) => candidateSize(event.target.value)}\r\n            >\r\n              <option selected value=\"10\">\r\n                10\r\n              </option>\r\n              <option value=\"20\">20</option>\r\n              <option value=\"30\">30</option>\r\n            </select>\r\n            {\"   \"}\r\n            Entries\r\n          </div>\r\n          <div className={`${canLeadStyle.filterAdduser}`}>\r\n            <div className=\"mt-2 me-2\">Total Count : {regisercount}</div>\r\n            <EmployerRegisterFilter />\r\n            <a\r\n              style={{ textDecoration: \"none\" }}\r\n              href={`https://www.taizo.in/waNotifications/customCompanyDetails.html?admin_id=${localStorage.getItem(\r\n                \"adminID\"\r\n              )}`}\r\n              target=\"_blank\"\r\n            >\r\n              <button className={`ms-2 ${canLeadStyle.NewLead}`}>\r\n                <AiOutlineUserAdd /> Add New Employer\r\n              </button>\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className={`${FBstyle.Container}`}>\r\n            <div className={`table-responsive-sm ${FBstyle.responsive}`}>\r\n              <TableContainer className={`${FBstyle.TableContainer}`}>\r\n                <Table stickyHeader aria-label=\"sticky table\" className={``}>\r\n                  <TableHead className={`${FBstyle.Header}`}>\r\n                    <TableRow>\r\n                      <StyledTableCell>Contact Person Name</StyledTableCell>\r\n                      <StyledTableCell>Company Name</StyledTableCell>\r\n                      <StyledTableCell>Mobile Number</StyledTableCell>\r\n                      <StyledTableCell>Industry</StyledTableCell>\r\n                      <StyledTableCell>City</StyledTableCell>\r\n                      <StyledTableCell>Area</StyledTableCell>\r\n                      {isSuperAdmin && (\r\n                        <StyledTableCell>Assigned By</StyledTableCell>\r\n                      )}\r\n                      <StyledTableCell>Registered on</StyledTableCell>\r\n                      <StyledTableCell>Status</StyledTableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {EmployerRegisterList.length > 0 ? (\r\n                      <>\r\n                        {EmployerRegisterList.map((Employer, i) => {\r\n                          return (\r\n                            <>\r\n                              <TableRow\r\n                                key={i}\r\n                                sx={{\r\n                                  \"&:last-child td, &:last-child th\": {\r\n                                    border: 0,\r\n                                  },\r\n                                }}\r\n                                onClick={() => {\r\n                                  currentCanDetails(Employer.employer);\r\n                                }}\r\n                              >\r\n                                <StyledTableCell\r\n                                  title={Employer.employer.contactPersonName}\r\n                                >\r\n                                  {Employer.employer.contactPersonName\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(\r\n                                          Employer.employer.contactPersonName\r\n                                        ),\r\n                                        15\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  sx={{ color: \"#0b7af0\", cursor: \"pointer\" }}\r\n                                  title={Employer.employer.companyName}\r\n                                  onClick={() => {\r\n                                    handlePopupDetails(\r\n                                      Employer.employer.id,\r\n                                      \"employerDetails\"\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  {Employer.employer.companyName\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(\r\n                                          Employer.employer.companyName\r\n                                        ),\r\n                                        20\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  title={Employer.employer.mobileNumber}\r\n                                >\r\n                                  {Employer.employer.mobileNumber\r\n                                    ? String(\r\n                                        Employer.employer.mobileNumber\r\n                                      ).slice(0, 10)\r\n                                    : \"\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell\r\n                                  title={Employer.employer.industry}\r\n                                >\r\n                                  {Employer.employer.industry\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(\r\n                                          Employer.employer.industry\r\n                                        ),\r\n                                        15\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  {Employer.employer.city}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  {Employer.employer.area}\r\n                                </StyledTableCell>\r\n                                {isSuperAdmin && (\r\n                                  <StyledTableCell align=\"left\">\r\n                                    <>\r\n                                      {\r\n                                        adminName[\r\n                                          adminid.indexOf(\r\n                                            Employer.employer.assignTo\r\n                                          )\r\n                                        ]\r\n                                      }\r\n                                    </>\r\n                                  </StyledTableCell>\r\n                                )}\r\n                                <StyledTableCell>\r\n                                  <DDMMYYYY_formate\r\n                                    dateValue={Employer.employer.createdTime}\r\n                                  />\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  <div\r\n                                    className={`${RegisterCandidateStyle.Status}`}\r\n                                  >\r\n                                    <div>\r\n                                      {Employer.employer.qualified === true && (\r\n                                        <>\r\n                                          <div\r\n                                            className={`${RegisterCandidateStyle.qualified}`}\r\n                                          >\r\n                                            Qualified\r\n                                          </div>\r\n                                        </>\r\n                                      )}\r\n\r\n                                      {Employer.employer.notQualified ===\r\n                                        true && (\r\n                                        <>\r\n                                          <div\r\n                                            className={`${RegisterCandidateStyle.Notqualified}`}\r\n                                          >\r\n                                            Not Qualified\r\n                                          </div>\r\n                                        </>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"btn-group dropstart\">\r\n                                      <button\r\n                                        type=\"button\"\r\n                                        // className={`btn btn-light `}\r\n\r\n                                        data-bs-toggle=\"dropdown\"\r\n                                        data-bs-no-caret=\"true\"\r\n                                        aria-expanded=\"false\"\r\n                                        style={{\r\n                                          border: \"none\",\r\n                                          background: \"none\",\r\n                                          color: \"#000\",\r\n                                          cursor: \"pointer\",\r\n                                          outline: \"none\",\r\n                                          position: \"relative\",\r\n                                          right: \"5px\",\r\n                                          // backgroundColor: \"red\",\r\n                                          fontSize: 20,\r\n                                          zIndex: 1,\r\n                                        }}\r\n                                      >\r\n                                        <span className=\"\">\r\n                                          {\" \"}\r\n                                          <BsThreeDotsVertical />{\" \"}\r\n                                        </span>\r\n                                        {/* <AiOutlineEdit /> */}\r\n                                      </button>{\" \"}\r\n                                      <ul\r\n                                        className=\"dropdown-menu\"\r\n                                        style={{ textAlign: \"left\" }}\r\n                                        // ref={dropdownRef}\r\n                                      >\r\n                                        <li\r\n                                          onClick={() => {\r\n                                            handleButtonClick(\r\n                                              \"qualified\",\r\n                                              Employer.employer.id\r\n                                            );\r\n                                          }}\r\n                                        >\r\n                                          <a className=\"dropdown-item\" href=\"#\">\r\n                                            <div\r\n                                              className={`${FBstyle.select_wrp}`}\r\n                                            >\r\n                                              <input\r\n                                                type=\"radio\"\r\n                                                ref={inputRef.qualified}\r\n                                                name={`status_${Employer.employer.id}`}\r\n                                                checked={\r\n                                                  Employer.employer.qualified\r\n                                                }\r\n                                                id={`qualified_${Employer.employer.id}`}\r\n                                                // onClick={(event) => {\r\n                                                //   handleCheckboxClick(event);\r\n                                                // }}\r\n                                                // onChange={(event) => {\r\n                                                //   handleConfirmationOpen(true);\r\n                                                //   handleIsQualified(\r\n                                                //     Employer.employer.id,\r\n                                                //     \"qualified\",\r\n                                                //     event\r\n                                                //   );\r\n                                                // }}\r\n                                                onClick={() => {\r\n                                                  openIsQualifyPopup(\r\n                                                    \"qualify\",\r\n                                                    Employer.employer.id\r\n                                                  );\r\n                                                }}\r\n                                              />\r\n\r\n                                              <label\r\n                                                htmlFor={`qualified_${Employer.employer.id}`}\r\n                                              >\r\n                                                {\" \"}\r\n                                                <GoDotFill\r\n                                                  style={{\r\n                                                    color: \"#169C50\",\r\n                                                    fontSize: 20,\r\n                                                  }}\r\n                                                />\r\n                                                Qualified\r\n                                              </label>\r\n                                            </div>\r\n                                          </a>\r\n                                        </li>\r\n                                        <li\r\n                                          // onClick={() => {\r\n                                          //   openIsQualifyPopup(\"notQualify\");\r\n                                          // }}\r\n                                          onClick={() =>\r\n                                            handleButtonClick(\r\n                                              \"notQualified\",\r\n                                              Employer.employer.id\r\n                                            )\r\n                                          }\r\n                                        >\r\n                                          <a className=\"dropdown-item\" href=\"#\">\r\n                                            <div\r\n                                              className={`${FBstyle.select_wrp}`}\r\n                                            >\r\n                                              <input\r\n                                                ref={inputRef.notQualified}\r\n                                                type=\"radio\"\r\n                                                checked={\r\n                                                  Employer.employer.notQualified\r\n                                                }\r\n                                                onClick={() => {\r\n                                                  openIsQualifyPopup(\r\n                                                    \"notQualify\",\r\n                                                    Employer.employer.id\r\n                                                  );\r\n                                                }}\r\n                                                name={`status_${Employer.employer.id}`}\r\n                                                id={`notQualified_${Employer.employer.id}`}\r\n                                                // onChange={(event) => {\r\n                                                //   handleConfirmationOpen(true);\r\n                                                //   handleIsQualified(\r\n                                                //     Employer.employer.id,\r\n                                                //     \"notQualified\",\r\n                                                //     event\r\n                                                //   );\r\n                                                // }}\r\n                                                // onClick={(event) => {\r\n                                                //   handleCheckboxClick(event);\r\n                                                // }}\r\n                                              />\r\n                                              <label\r\n                                                htmlFor={`notQualified_${Employer.employer.id}`}\r\n                                              >\r\n                                                <GoDotFill\r\n                                                  style={{\r\n                                                    color: \"#b2261c\",\r\n                                                    fontSize: 20,\r\n                                                  }}\r\n                                                />{\" \"}\r\n                                                Not Qualified\r\n                                              </label>\r\n                                            </div>\r\n                                          </a>\r\n                                        </li>\r\n                                        <li\r\n                                          onClick={() =>\r\n                                            setShowEmployerSendSLA(\r\n                                              !showEmployerSendSLA\r\n                                            )\r\n                                          }\r\n                                        >\r\n                                          <div className=\"dropdown-item\">\r\n                                            <label htmlFor=\"\">\r\n                                              <GoDotFill\r\n                                                style={{\r\n                                                  color: \"#16617b\",\r\n                                                  fontSize: 20,\r\n                                                }}\r\n                                              />{\" \"}\r\n                                              SLA Email\r\n                                            </label>\r\n                                          </div>\r\n                                        </li>\r\n                                      </ul>\r\n                                    </div>\r\n                                  </div>\r\n                                </StyledTableCell>\r\n                              </TableRow>\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <h6 className=\"text-danger\">Not found</h6>\r\n                      </>\r\n                    )}\r\n                  </TableBody>\r\n                  {showEmployerSendSLA && (\r\n                    <EmployerEmailSendSLA\r\n                      Id={currentCandidateDetail.id}\r\n                      onClose={closeSLA}\r\n                      onSuccess={closeSLA}\r\n                      toEmail={currentCandidateDetail.emailId}\r\n                    />\r\n                  )}\r\n                  {showConfirmationPopup && (\r\n                    <MyModal>\r\n                      <ModalContainer\r\n                        zIndex={1005}\r\n                        childComponent={\r\n                          <>\r\n                            <ConfirmationPopup\r\n                              heading={\"Confirmation\"}\r\n                              headingText={`Are you sure you want to update <b> ${currentCandidateDetail.contactPersonName}</b>`}\r\n                              onConfirm={ConfirmFormSubmit}\r\n                              enableSubmit={enableSubmit}\r\n                              onRequestClose={handleConfirmationClose}\r\n                            />\r\n                          </>\r\n                        }\r\n                      />\r\n                    </MyModal>\r\n                  )}\r\n                  {isQualifiedDetails.openPopup && (\r\n                    <MyModal>\r\n                      <ModalContainer\r\n                        zIndex={10000}\r\n                        childComponent={\r\n                          <ConfirmationPopup\r\n                            heading={\"Confirmation\"}\r\n                            headingText={isQualifiedDetails.confirmtext}\r\n                            onConfirm={ConfirmFormSubmit}\r\n                            enableSubmit={enableSubmit}\r\n                            onRequestClose={handleConfirmationClose}\r\n                            //</br> with <b>${contactPersonName}</b>\r\n                          />\r\n                        }\r\n                      />\r\n                    </MyModal>\r\n                  )}\r\n                </Table>\r\n              </TableContainer>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-center align-items-center mb-3 position-absolute bottom-0 start-50 translate-middle-x\">\r\n            <Stack spacing={2}>\r\n              <Pagination\r\n                count={pageCount}\r\n                // page={page}\r\n                onChange={candidatePagination}\r\n                variant=\"outlined\"\r\n                shape=\"rounded\"\r\n                color=\"success\"\r\n                size=\"medium\"\r\n              />\r\n            </Stack>\r\n          </div>\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"BoxContainerWidth\":\"RegisteredCandidate_BoxContainerWidth__ndKSR\",\"flex-container\":\"RegisteredCandidate_flex-container__sW+Fi\",\"Status\":\"RegisteredCandidate_Status__OMeY8\",\"qualified\":\"RegisteredCandidate_qualified__bknLX\",\"Notqualified\":\"RegisteredCandidate_Notqualified__AW0Gj\",\"Followup\":\"RegisteredCandidate_Followup__6isun\"};"],"names":["EmployerRegisterFilter","useSelector","state","EmployerRegisterDetails","EmployerRegisterFilterRedDot","refreshRedDot","size","create","createdTime","ended","endDate","showFilter","setShowFilter","useState","showRedDot","setShowRedDot","initialState","companyName","contactNumber","industry","city","area","formData","setFormData","Dispatch","useDispatch","options","setOptions","dateRange","setDateRange","start","end","dateFilterType","showCustom","setshowCustom","validationErrors","setValidationErrors","anchorEl","setAnchorEl","React","open","Boolean","handleDateSelect","val","selectedOption","today","Date","startDate","setDate","getDate","prev","toISOString","split","setMonth","getMonth","handleCustomDate","value","type","target","useEffect","console","log","getJobFilterOptions","then","data","IndustryOptions","filter","el","category","cityOptions","element","areaOptions","updateArea","event","updateCity","updateIndustry","handleFieldChange","field","numbersOnlyTest","_jsxs","children","_jsx","className","concat","FBStyle","Filterbutton","variant","onClick","BiFilterAlt","style","backgroundColor","width","height","borderRadius","MyModal","ModalContainer","zIndex","childComponent","_Fragment","e","preventDefault","EmployerRegisterActions","setEmployerRegisterFilter","page","cursor","fontSize","AiOutlineClose","BoxContainerWidth","onSubmit","isFilterApplied","setEmployerRegisterRedDot","handleSubmit","Stack","TextField","id","label","fullWidth","onChange","inputProps","maxLength","InputProps","startAdornment","display","alignItems","AiOutlinePhone","marginRight","FormControl","undefined","currentTarget","Menu","onClose","MenuListProps","MenuItem","minWidth","htmlFor","name","min","max","isFormValid","isValid","placeholder","Autocomplete","reason","map","option","getOptionLabel","filterSelectedOptions","renderInput","params","handleClear","search","sx","StyledTableCell","styled","TableCell","_ref","theme","tableCellClasses","head","color","padding","body","EmployerRegiterTable","props","EmployerRegister","currentCandidateDetail","setCurrentCandidateDetails","pageCount","setPageCount","EmployerRegisterList","setEmployerRegisterList","pagesCount","setPagesCount","totalPages","totalCount","currentPage","enableSubmit","setEnableSubmit","showConfirmationPopup","setShowConfirmPopup","adminDetails","showEmployerSendSLA","setShowEmployerSendSLA","isSuperAdmin","roleID","adminName","setAdminName","adminid","setAdminId","regisercount","setRegisercount","GetAllsdminDetails","adminNames","item","userName","adminIds","inputRef","qualified","useRef","notQualified","handleButtonClick","refName","employerId","ref","current","click","isQualifiedDetails","setIsQualifiedDetails","confirmtext","isQualified","openPopup","empId","openIsQualifyPopup","status","confirmText","contactPersonName","handleConfirmationClose","ConfirmFormSubmit","PutEmployerIsQualified","GetEmployerFilterDetails","employerList","Math","ceil","catch","err","closeSLA","FBstyle","FilterHead","setEmployerRegisterFilterSize","candidateSize","selected","canLeadStyle","filterAdduser","textDecoration","href","localStorage","getItem","NewLead","AiOutlineUserAdd","Container","responsive","TableContainer","Table","stickyHeader","TableHead","Header","TableRow","TableBody","length","Employer","i","border","employer","title","textTruncate","capitalizeWords","handlePopupDetails","commonPopupActions","setShowPopup","mobileNumber","String","slice","align","indexOf","assignTo","DDMMYYYY_formate","dateValue","RegisterCandidateStyle","Status","Notqualified","background","outline","position","right","BsThreeDotsVertical","textAlign","select_wrp","checked","GoDotFill","EmployerEmailSendSLA","Id","onSuccess","toEmail","emailId","ConfirmationPopup","heading","headingText","onConfirm","onRequestClose","spacing","Pagination","count","setEmployerRegisterFilterPage","shape"],"sourceRoot":""}