{"version":3,"file":"static/js/882.b88e3703.chunk.js","mappings":"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","sources":["pages/Jobs/JobsAll/JobsFilter.js","pages/Jobs/JobsAll/JobsTable.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable default-case */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getJobFilterOptions } from \"../../../apiServices\";\r\nimport { MyModal, convertDateYYYYMMDD } from \"../../../utility\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { BiFilterAlt } from \"react-icons/bi\";\r\nimport FBStyle from \"../../Candidate/FacebookMeta/candidateFacebookMeta.module.scss\";\r\nimport {\r\n  Autocomplete,\r\n  FormControl,\r\n  Menu,\r\n  MenuItem,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { JobsDetailsActions } from \"../../../redux-store/store\";\r\nfunction JobsFilter() {\r\n  const JobFilter = useSelector((state) => state.JobsDetailsDetails.JobsData);\r\n  const JobFilterRedDot = useSelector(\r\n    (state) => state.JobsDetailsDetails.refreshRedDot\r\n  );\r\n  const create = useSelector((state) => state.JobsDetailsDetails.createdTime);\r\n  const ended = useSelector((state) => state.JobsDetailsDetails.endDate);\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const Dispatch = useDispatch();\r\n  const [adminList, setAdminList] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [filterOptions, setFilteredOptions] = useState([]);\r\n  const handleOptionChange = (event, values) => {\r\n    console.log(values, \"values\");\r\n    setSelectedOptions(values);\r\n  };\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [showCustom, setshowCustom] = useState(false);\r\n\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const [validationErrors, setValidationErrors] = useState({\r\n    start: false,\r\n    end: false,\r\n  });\r\n\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n  // console.log(adminDetails);\r\n\r\n  let initialFilterObj = {\r\n    assignTo: localStorage.getItem(\"adminID\"),\r\n    priority: null,\r\n    companyName: \"\",\r\n    area: [],\r\n    benefits: [],\r\n    gender: null,\r\n    industry: [],\r\n    jobCategory: [],\r\n    jobExp: -1,\r\n    jobMaxExp: -1,\r\n    jobLocation: [],\r\n    keyskills: [],\r\n    qualification: [],\r\n    employerId: -1,\r\n    salary: -1,\r\n    maxSalary: -1,\r\n    pages: 1,\r\n    size: 10,\r\n    createdTime: \"2021-01-01\",\r\n    endDate: convertDateYYYYMMDD(new Date()),\r\n    dateFilterType: \"\",\r\n  };\r\n\r\n  // const [formData, setFormData] = useState(initialState);\r\n  const [options, setOptions] = useState({\r\n    industry: [],\r\n    jobCategory: [],\r\n    keyskills: [],\r\n    qualification: [],\r\n    area: [],\r\n    jobLocation: [],\r\n  });\r\n\r\n  const [filteredObj, setFilteredObj] = useState({\r\n    assignTo: localStorage.getItem(\"adminID\"),\r\n    priority: JobFilter.priority,\r\n    companyName: JobFilter.companyName,\r\n    area: JobFilter.area,\r\n    benefits: JobFilter.benefits,\r\n    gender: JobFilter.gender,\r\n    industry: JobFilter.industry,\r\n    jobCategory: JobFilter.jobCategory,\r\n    jobExp: JobFilter.jobExp,\r\n    jobMaxExp: JobFilter.jobMaxExp,\r\n    jobLocation: JobFilter.jobLocation,\r\n    keyskills: JobFilter.keyskills,\r\n    qualification: JobFilter.qualification,\r\n    employerId: JobFilter.employerId,\r\n    salary: JobFilter.salary,\r\n    maxSalary: JobFilter.maxSalary,\r\n    pages: JobFilter.pages,\r\n    size: JobFilter.size,\r\n    createdTime: JobFilter.createdTime,\r\n    endDate: JobFilter.endDate,\r\n  });\r\n\r\n  const [showRedDot, setShowRedDot] = useState(false);\r\n\r\n  const [dateRange, setDateRange] = useState({\r\n    start: JobFilter.createdTime,\r\n    end: JobFilter.endDate,\r\n    dateFilterType: JobFilter.dateFilterType,\r\n  });\r\n  // useEffect(() => {\r\n  //   getJobFilterOptions().then((data) => {\r\n  //     setOptions((prevOptions) => ({\r\n  //       ...prevOptions,\r\n  //       industry: data.filter((el) => el.category == \"industry\"),\r\n  //       jobCategory: data.filter((el) => el.category == \"job category\"),\r\n  //       keySkills: data.filter((element) => element.category == \"skills\"),\r\n  //       jobLocation: data.filter((element) => element.category == \"city\"),\r\n  //       qualification: data.filter(\r\n  //         (element) => element.category == \"qualification\"\r\n  //       ),\r\n  //       area: data.filter((element) => element.category == \"areas\"),\r\n  //     }));\r\n  //   });\r\n\r\n  //   GetAllsdminDetails()\r\n  //     .then((data) => {\r\n  //       setAdminList(data);\r\n  //     })\r\n  //     .catch(() => {\r\n  //       alert(\"Something Went wrong\");\r\n  //     });\r\n  // }, []);\r\n  function handleFieldChange(field, value) {\r\n    switch (field) {\r\n      // case \"\":\r\n      //   if (numbersOnlyTest(value)) {\r\n      //     setFormData({ ...formData, [field]: value });\r\n      //   }\r\n      //   break;\r\n      case \"companyName\":\r\n        setFilteredObj({ ...filteredObj, [field]: value });\r\n        break;\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getJobFilterOptions().then((data) => {\r\n      // to get filter options\r\n      // console.log(data);\r\n      setFilteredOptions(data);\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (selectedOptions.length !== 0) {\r\n      selectedOptions.forEach((option) => {\r\n        switch (option.category) {\r\n          case \"areas\":\r\n            setFilteredObj((prev) => {\r\n              let updatedAreas = [...prev.area];\r\n\r\n              if (!updatedAreas.includes(option.options)) {\r\n                updatedAreas.push(option.options);\r\n              } else {\r\n                updatedAreas = selectedOptions\r\n                  .filter((el) => el.category === \"areas\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, area: updatedAreas };\r\n            });\r\n            break;\r\n          case \"benefits\":\r\n            setFilteredObj((prev) => {\r\n              let updatedBenefits = [...prev.benefits];\r\n\r\n              if (!updatedBenefits.includes(option.options)) {\r\n                updatedBenefits.push(option.options);\r\n              } else {\r\n                updatedBenefits = selectedOptions\r\n                  .filter((el) => el.category === \"benefits\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, benefits: updatedBenefits };\r\n            });\r\n            break;\r\n          case \"skills\":\r\n            setFilteredObj((prev) => {\r\n              let updatedSkills = [...prev.keyskills];\r\n\r\n              if (!updatedSkills.includes(option.options)) {\r\n                updatedSkills.push(option.options);\r\n              } else {\r\n                updatedSkills = selectedOptions\r\n                  .filter((el) => el.category === \"skills\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, keyskills: updatedSkills };\r\n            });\r\n            break;\r\n          case \"qualification\":\r\n            setFilteredObj((prev) => {\r\n              let updatedQualifications = [...prev.qualification];\r\n\r\n              if (!updatedQualifications.includes(option.options)) {\r\n                updatedQualifications.push(option.options);\r\n              } else {\r\n                updatedQualifications = selectedOptions\r\n                  .filter((el) => el.category === \"qualification\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, qualification: updatedQualifications };\r\n            });\r\n            break;\r\n          case \"industry\":\r\n            setFilteredObj((prev) => {\r\n              let updatedIndustries = [...prev.industry];\r\n\r\n              if (!updatedIndustries.includes(option.options)) {\r\n                updatedIndustries.push(option.options);\r\n              } else {\r\n                updatedIndustries = selectedOptions\r\n                  .filter((el) => el.category === \"industry\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, industry: updatedIndustries };\r\n            });\r\n            break;\r\n          case \"city\":\r\n            setFilteredObj((prev) => {\r\n              let updatedJobLocations = [...prev.jobLocation];\r\n\r\n              if (!updatedJobLocations.includes(option.options)) {\r\n                updatedJobLocations.push(option.options);\r\n              } else {\r\n                updatedJobLocations = selectedOptions\r\n                  .filter((el) => el.category === \"city\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, jobLocation: updatedJobLocations };\r\n            });\r\n            break;\r\n          case \"job category\":\r\n            setFilteredObj((prev) => {\r\n              let updatedJobCategory = [...prev.jobCategory];\r\n\r\n              if (!updatedJobCategory.includes(option.options)) {\r\n                updatedJobCategory.push(option.options);\r\n              } else {\r\n                updatedJobCategory = selectedOptions\r\n                  .filter((el) => el.category === \"job category\")\r\n                  .map((el) => el.options);\r\n              }\r\n\r\n              return { ...prev, jobCategory: updatedJobCategory };\r\n            });\r\n\r\n            break;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Resetting values if not selected\r\n    let categoryList = selectedOptions.map((el) => el.category);\r\n\r\n    if (!categoryList.includes(\"areas\")) {\r\n      setFilteredObj((prev) => ({ ...prev, area: [] }));\r\n    }\r\n\r\n    if (!categoryList.includes(\"benefits\")) {\r\n      setFilteredObj((prev) => ({ ...prev, benefits: [] }));\r\n    }\r\n\r\n    if (!categoryList.includes(\"skills\")) {\r\n      setFilteredObj((prev) => ({ ...prev, keyskills: [] }));\r\n    }\r\n\r\n    if (!categoryList.includes(\"qualification\")) {\r\n      setFilteredObj((prev) => ({ ...prev, qualification: [] }));\r\n    }\r\n\r\n    if (!categoryList.includes(\"industry\")) {\r\n      setFilteredObj((prev) => ({ ...prev, industry: [] }));\r\n    }\r\n\r\n    if (!categoryList.includes(\"city\")) {\r\n      setFilteredObj((prev) => ({ ...prev, jobLocation: [] }));\r\n    }\r\n\r\n    if (!categoryList.includes(\"job category\")) {\r\n      setFilteredObj((prev) => ({ ...prev, jobCategory: [] }));\r\n    }\r\n\r\n    // ...\r\n  }, [selectedOptions]);\r\n  const handleDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date();\r\n    // endDate.setDate(endDate.getDate() + 1);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const startDate = new Date();\r\n\r\n      startDate.setDate(today.getDate() - 7);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const startDate = new Date();\r\n      startDate.setMonth(startDate.getMonth() - 1);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const startDate = new Date(today);\r\n      startDate.setDate(today.getDate() - 13);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom(true);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n  function handleCustomDate(value, type) {\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n\r\n  const isFormValid = () => {\r\n    // Implement your validation logic here\r\n    // For example, you can check if both start and end dates are filled\r\n    const isValid = dateRange.start && dateRange.end;\r\n\r\n    if (!dateRange.start) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: true,\r\n      }));\r\n    }\r\n\r\n    if (!dateRange.end) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: true,\r\n      }));\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n  const handleApplyCustomDate = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isFormValid()) {\r\n      // Your submit logic here\r\n      // Proceed with form submission\r\n      console.log(\"Form submitted:\", dateRange);\r\n      setValidationErrors({\r\n        start: false,\r\n        end: false,\r\n      });\r\n      setshowCustom(false); // Close the modal or perform other actions\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(filteredObj);\r\n  }, [filteredObj]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      JobsDetailsActions.setJobsData({\r\n        ...filteredObj,\r\n        createdTime: dateRange.start || create,\r\n        endDate: dateRange.end || ended,\r\n        pages: 1,\r\n        size: JobFilter.size,\r\n        dateFilterType: dateRange.dateFilterType || \"\",\r\n      })\r\n    );\r\n    const isFilterApplied =\r\n      filteredObj.priority ||\r\n      filteredObj.companyName ||\r\n      filteredObj.area ||\r\n      filteredObj.benefits ||\r\n      filteredObj.gender ||\r\n      filteredObj.industry ||\r\n      filteredObj.jobCategory ||\r\n      filteredObj.jobExp ||\r\n      filteredObj.jobMaxExp ||\r\n      filteredObj.jobLocation ||\r\n      filteredObj.keyskills ||\r\n      filteredObj.qualification ||\r\n      filteredObj.employerId ||\r\n      filteredObj.salary ||\r\n      filteredObj.maxSalary ||\r\n      dateRange.start ||\r\n      dateRange.end;\r\n\r\n    Dispatch(JobsDetailsActions.setJobsRedDot(isFilterApplied));\r\n    // if (isFilterApplied) {\r\n    //   setShowRedDot(true);\r\n    // } else {\r\n    //   setShowRedDot(false);\r\n    // }\r\n    setShowFilter(false);\r\n  };\r\n  function handleClear(e) {\r\n    e.preventDefault();\r\n\r\n    Dispatch(JobsDetailsActions.setJobsData(initialFilterObj));\r\n\r\n    setDateRange({\r\n      start: \"2020-01-01\",\r\n      end: convertDateYYYYMMDD(new Date()),\r\n      dateFilterType: \"\",\r\n    });\r\n    setSelectedOptions([]);\r\n    setFilteredObj(initialFilterObj);\r\n    setShowRedDot(false);\r\n    Dispatch(JobsDetailsActions.setJobsRedDot(false));\r\n  }\r\n  function handleClickCross(e) {\r\n    e.preventDefault();\r\n    Dispatch(\r\n      JobsDetailsActions.setJobsData({\r\n        ...filteredObj,\r\n        createdTime: dateRange.start,\r\n        endDate: dateRange.end,\r\n        pages: 1,\r\n        size: JobFilter.size,\r\n        dateFilterType: dateRange.dateFilterType,\r\n      })\r\n    );\r\n    setShowFilter(false);\r\n  }\r\n  const ExpMinandMax = [\r\n    {\r\n      value: \"0\",\r\n      label: \"0\",\r\n    },\r\n    {\r\n      value: \"1\",\r\n      label: \"1\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"2\",\r\n    },\r\n    {\r\n      value: \"3\",\r\n      label: \"3\",\r\n    },\r\n    {\r\n      value: \"4\",\r\n      label: \"4\",\r\n    },\r\n\r\n    {\r\n      value: \"5\",\r\n      label: \"5\",\r\n    },\r\n    {\r\n      value: \"6\",\r\n      label: \"6\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      label: \"7\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      label: \"8\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      label: \"9\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      label: \"10\",\r\n    },\r\n    {\r\n      value: \"11\",\r\n      label: \"11\",\r\n    },\r\n  ];\r\n  const handlePriorityChange = (value, reason) => {\r\n    console.log(value, reason, \"valueeeeeeeeeeeeee\");\r\n    if (value !== null) {\r\n      setFilteredObj((prev) => ({ ...prev, priority: value }));\r\n    } else {\r\n      setFilteredObj((prev) => ({ ...prev, priority: null }));\r\n    }\r\n  };\r\n  const handleExperienceChange = (e) => {\r\n    const { value, name } = e.target;\r\n    console.log(e);\r\n    console.log(value, name);\r\n    if (name === \"minExperience\") {\r\n      setFilteredObj((prev) => ({ ...prev, jobExp: value }));\r\n    } else if (name === \"maxExperience\") {\r\n      setFilteredObj((prev) => ({ ...prev, jobMaxExp: value }));\r\n    }\r\n  };\r\n  const handleSalary = (e) => {\r\n    const { value, id } = e.target;\r\n    // console.log(value, id);\r\n    if (id === \"minSalary\") {\r\n      if (value != -1) {\r\n        setFilteredObj((prev) => ({ ...prev, salary: value }));\r\n      } else {\r\n        setFilteredObj((prev) => ({ ...prev, salary: -1 }));\r\n      }\r\n    }\r\n\r\n    if (id === \"maxSalary\") {\r\n      if (value != -1) {\r\n        setFilteredObj((prev) => ({ ...prev, maxSalary: value }));\r\n      } else {\r\n        setFilteredObj((prev) => ({ ...prev, maxSalary: -1 }));\r\n      }\r\n    }\r\n  };\r\n  const experienceLabels = [\r\n    { value: \"high\", label: \"High\" },\r\n    { value: \"medium\", label: \"Medium\" },\r\n    { value: \"low\", label: \"Low\" },\r\n  ];\r\n  const Gender = [\r\n    {\r\n      value: \"Male\",\r\n      label: \"Male\",\r\n    },\r\n    {\r\n      value: \"Female\",\r\n      label: \"Female\",\r\n    },\r\n    // {\r\n    //   value: \"Both\",\r\n    //   label: \"Both\",\r\n    // },\r\n  ];\r\n  const handleGenderChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    if (name === \"Gender\") {\r\n      setFilteredObj((prev) => ({ ...prev, gender: value }));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button\r\n          className={`rounded-pill d-flex align-items-center ${FBStyle.Filterbutton}`}\r\n          variant=\"contained\"\r\n          onClick={() => setShowFilter(true)}\r\n        >\r\n          <BiFilterAlt />\r\n          <p\r\n            style={{\r\n              backgroundColor: JobFilterRedDot ? \"red\" : \"transparent\",\r\n              width: \"8px\",\r\n              height: \"8px\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          ></p>\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {showFilter && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <>\r\n                {\" \"}\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <h4 className=\"text-center mb-2\">Filter by</h4>\r\n                  <h3>\r\n                    <span\r\n                      onClick={handleClickCross}\r\n                      className=\"btn btn-outline-danger\"\r\n                      style={{ cursor: \"pointer\", fontSize: 15 }}\r\n                    >\r\n                      <AiOutlineClose />\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div className={`${FBStyle.BoxContainerWidth}`}>\r\n                  <>\r\n                    <form\r\n                      onSubmit={(e) => {\r\n                        handleSubmit(e);\r\n                      }}\r\n                    >\r\n                      <Stack className=\"mt-1\">\r\n                        {\" \"}\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-9\">\r\n                            {\" \"}\r\n                            <Autocomplete\r\n                              multiple\r\n                              id=\"tags-outlined\"\r\n                              className=\"\"\r\n                              options={filterOptions.map((option) => option)}\r\n                              getOptionLabel={(option) =>\r\n                                `${option.options} (${option.category})`\r\n                              }\r\n                              value={selectedOptions}\r\n                              filterSelectedOptions\r\n                              onChange={handleOptionChange}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"Select Option\"\r\n                                  placeholder=\"Area,City,Industry,Job Category,Benifits,Skills,Qualification\"\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-3\">\r\n                            <TextField\r\n                              // className=\"mt-2\"\r\n                              fullWidth\r\n                              label=\"Company Name\"\r\n                              name=\"companyName\"\r\n                              placeholder=\"Company Name\"\r\n                              value={filteredObj.companyName}\r\n                              onChange={(event) =>\r\n                                handleFieldChange(\r\n                                  \"companyName\",\r\n                                  event.target.value\r\n                                )\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            {\" \"}\r\n                            <FormControl variant=\"outlined\" fullWidth>\r\n                              <TextField\r\n                                label=\"Created on\"\r\n                                id=\"basic-button\"\r\n                                value={`${dateRange.dateFilterType}`}\r\n                                // value={`${dateRange.start} - ${dateRange.end}`}\r\n                                aria-controls={open ? \"basic-menu\" : undefined}\r\n                                aria-haspopup=\"true\"\r\n                                aria-expanded={open ? \"true\" : undefined}\r\n                                onClick={handleClick}\r\n                              ></TextField>\r\n                              <Menu\r\n                                id=\"basic-menu\"\r\n                                anchorEl={anchorEl}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                                fullWidth\r\n                                MenuListProps={{\r\n                                  \"aria-labelledby\": \"basic-button\",\r\n                                }}\r\n                                style={{ width: \"100%\" }}\r\n                              >\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"today\");\r\n                                  }}\r\n                                  style={{ width: \"250px\" }}\r\n                                >\r\n                                  Today\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastWeek\");\r\n                                  }}\r\n                                >\r\n                                  Last 1 Week\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastTwoWeeks\");\r\n                                  }}\r\n                                >\r\n                                  Last 2 Week\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"lastMonth\");\r\n                                  }}\r\n                                >\r\n                                  Last Month\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                  onClick={() => {\r\n                                    handleDateSelect(\"custom\");\r\n                                  }}\r\n                                >\r\n                                  Custom Date\r\n                                </MenuItem>\r\n                              </Menu>\r\n                            </FormControl>\r\n                            {showCustom && (\r\n                              <MyModal>\r\n                                <ModalContainer\r\n                                  zIndex={1005}\r\n                                  childComponent={\r\n                                    <div\r\n                                      style={{\r\n                                        minWidth: \"400px\",\r\n                                        width: \"auto\",\r\n                                      }}\r\n                                    >\r\n                                      <>\r\n                                        <div>\r\n                                          <form>\r\n                                            <p className=\"text-center \">\r\n                                              Select Custom Date{\" \"}\r\n                                            </p>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"start\">\r\n                                                From\r\n                                              </label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.start\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"start\"\r\n                                                onChange={(value) =>\r\n                                                  handleCustomDate(\r\n                                                    value,\r\n                                                    \"startDate\"\r\n                                                  )\r\n                                                }\r\n                                                value={dateRange.start}\r\n                                                name=\"trip-start\"\r\n                                                min=\"2020-01-01\"\r\n                                                max={\r\n                                                  new Date()\r\n                                                    .toISOString()\r\n                                                    .split(\"T\")[0]\r\n                                                }\r\n                                              />\r\n                                              {validationErrors.start && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  Start date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                              <label htmlFor=\"end\">To</label>\r\n                                              <input\r\n                                                className={`form-control ${\r\n                                                  validationErrors.end\r\n                                                    ? \"is-invalid\"\r\n                                                    : \"\"\r\n                                                }`}\r\n                                                value={dateRange.end}\r\n                                                style={{ width: \"100%\" }}\r\n                                                type=\"date\"\r\n                                                id=\"end\"\r\n                                                onChange={(value) =>\r\n                                                  handleCustomDate(\r\n                                                    value,\r\n                                                    \"endDate\"\r\n                                                  )\r\n                                                }\r\n                                                name=\"trip-end\"\r\n                                                min=\"2020-01-01\"\r\n                                                max={\r\n                                                  new Date()\r\n                                                    .toISOString()\r\n                                                    .split(\"T\")[0]\r\n                                                }\r\n                                              />\r\n                                              {validationErrors.end && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                  End date is required.\r\n                                                </div>\r\n                                              )}\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-end mt-3 \">\r\n                                              <button\r\n                                                onClick={() => {\r\n                                                  setValidationErrors({\r\n                                                    start: false,\r\n                                                    end: false,\r\n                                                  });\r\n                                                  setshowCustom(false);\r\n                                                }}\r\n                                                style={{\r\n                                                  backgroundColor: \"#b2261c\",\r\n                                                }}\r\n                                                className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                              >\r\n                                                Close\r\n                                              </button>\r\n                                              <button\r\n                                                onClick={handleApplyCustomDate}\r\n                                                // color=\"primary\"\r\n                                                className=\"btn rounded-pill text-white px-4\"\r\n                                                style={{\r\n                                                  backgroundColor: \"#169C50\",\r\n                                                }}\r\n                                              >\r\n                                                Apply\r\n                                              </button>\r\n                                            </div>\r\n                                          </form>\r\n                                        </div>\r\n                                      </>\r\n                                    </div>\r\n                                  }\r\n                                />\r\n                              </MyModal>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            {\" \"}\r\n                            <Autocomplete\r\n                              // filterSelectedOptions\r\n                              id=\"priority\"\r\n                              name=\"priority\"\r\n                              disableClearable\r\n                              onChange={(e, value, reason) =>\r\n                                handlePriorityChange(value, reason)\r\n                              } // Pass 'value' directly\r\n                              options={experienceLabels.map(\r\n                                (option) => option.label\r\n                              )}\r\n                              value={filteredObj.priority}\r\n                              renderInput={(params) => (\r\n                                <TextField\r\n                                  {...params}\r\n                                  label=\"Priority\"\r\n                                  InputProps={{\r\n                                    ...params.InputProps,\r\n                                    type: \"search\",\r\n                                  }}\r\n                                />\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            {\" \"}\r\n                            <TextField\r\n                              onChange={(e) => handleExperienceChange(e)}\r\n                              name=\"minExperience\"\r\n                              id=\"minExperience\"\r\n                              className=\"form-control\"\r\n                              select\r\n                              label=\"Min Experience\"\r\n                              value={filteredObj.jobExp}\r\n                            >\r\n                              {ExpMinandMax.map((option) => (\r\n                                <MenuItem\r\n                                  key={option.value}\r\n                                  value={option.value}\r\n                                >\r\n                                  {option.label}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </TextField>\r\n                          </div>\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            <TextField\r\n                              onChange={(e) => handleExperienceChange(e)}\r\n                              name=\"maxExperience\"\r\n                              id=\"maxExperience\"\r\n                              className=\"form-control\"\r\n                              select\r\n                              label=\"Max Experience\"\r\n                              value={filteredObj.jobMaxExp}\r\n                            >\r\n                              {ExpMinandMax.map((option) => (\r\n                                <MenuItem\r\n                                  key={option.value}\r\n                                  value={option.value}\r\n                                >\r\n                                  {option.label}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </TextField>\r\n                          </div>\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            <TextField\r\n                              onChange={(e) => {\r\n                                handleSalary(e);\r\n                              }}\r\n                              value={\r\n                                filteredObj.salary === -1\r\n                                  ? \"\"\r\n                                  : filteredObj.salary\r\n                              }\r\n                              className=\"form-control\"\r\n                              type=\"number\"\r\n                              id=\"minSalary\"\r\n                              label=\"Min Salary\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            {\" \"}\r\n                            <TextField\r\n                              type=\"number\"\r\n                              onChange={(e) => {\r\n                                handleSalary(e);\r\n                              }}\r\n                              value={\r\n                                filteredObj.maxSalary === -1\r\n                                  ? \"\"\r\n                                  : filteredObj.maxSalary\r\n                              }\r\n                              className=\"form-control\"\r\n                              id=\"maxSalary\"\r\n                              label=\"Max Salary\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-sm-3 mt-3\">\r\n                            {\" \"}\r\n                            <TextField\r\n                              onChange={(e) => handleGenderChange(e)}\r\n                              name=\"Gender\"\r\n                              id=\"Gender\"\r\n                              className=\"form-control\"\r\n                              select\r\n                              label=\"Gender\"\r\n                              value={filteredObj.gender}\r\n                            >\r\n                              {Gender.map((option) => (\r\n                                <MenuItem\r\n                                  key={option.value}\r\n                                  value={option.value}\r\n                                >\r\n                                  {option.label}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </TextField>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row\"></div>\r\n                        <div className=\"d-flex flex-row gap-2 justify-content-end mt-4\">\r\n                          <button\r\n                            className={`rounded-pill ${FBStyle.Filterbutton}`}\r\n                            variant=\"outlined\"\r\n                            onClick={(e) => {\r\n                              handleClear(e);\r\n                            }}\r\n                          >\r\n                            Clear All\r\n                          </button>\r\n                          <button\r\n                            className={`rounded-pill ${FBStyle.search}`}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ minWidth: \"150px\" }}\r\n                          >\r\n                            Search\r\n                          </button>\r\n                        </div>\r\n                      </Stack>\r\n                    </form>\r\n                  </>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobsFilter;\r\n","/* eslint-disable react/jsx-pascal-case */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {\r\n  Backdrop,\r\n  CircularProgress,\r\n  Pagination,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\n// import FBinterviewFilter from \"../../Candidate/FacebookMeta/FBinterviewFilter\";\r\nimport { LuRefreshCcw } from \"react-icons/lu\";\r\nimport FBstyle from \"../../Candidate/FacebookMeta/candidateFacebookMeta.module.scss\";\r\nimport styled from \"styled-components\";\r\nimport { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport whiteCollar from \"../../../assets/images/whiteCollar.png\";\r\nimport blueCollar from \"../../../assets/images/blueCollar.png\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getFilteredJobs } from \"../../../apiServices\";\r\nimport {\r\n  JobsDetailsActions,\r\n  commonPopupActions,\r\n} from \"../../../redux-store/store\";\r\nimport JobsFilter from \"./JobsFilter\";\r\nimport {\r\n  DDMMYYYY_formate,\r\n  capitalizeWords,\r\n  convertDateYYYYMMDD,\r\n  textTruncate,\r\n} from \"../../../utility\";\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#d2d2d2\",\r\n    color: \"#545454f0\",\r\n    // Adjust the width as needed\r\n    \"@media (max-width: 992px)\": {},\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    // width: \"300px\", // Adjust the width as needed\r\n    \"@media (max-width: 992px)\": {},\r\n  },\r\n}));\r\nfunction JobsTable() {\r\n  const JobFilterList = useSelector(\r\n    (state) => state.JobsDetailsDetails.JobsList\r\n  );\r\n  const Dispatch = useDispatch();\r\n  const [pageCount, setpageCount] = useState();\r\n  const [showLoader, setShowLoader] = useState(false); // New state for loader\r\n\r\n  const JobFilter = useSelector((state) => state.JobsDetailsDetails.JobsData);\r\n\r\n  useEffect(() => {\r\n    console.log(JobFilterList);\r\n  }, [JobFilterList]);\r\n\r\n  useEffect(() => {\r\n    getFilteredJobs(JobFilter).then((data) => {\r\n      console.log(data, \"data\");\r\n      Dispatch(JobsDetailsActions.setJobList(data));\r\n\r\n      setpageCount(\r\n        Math.ceil((data.length > 0 ? data[0].total_count : 10) / JobFilter.size)\r\n      );\r\n    });\r\n  }, [JobFilter]);\r\n  function candidatePagination(event, page) {\r\n    const currentPage = page;\r\n\r\n    Dispatch(JobsDetailsActions.setJobsDataPage(currentPage));\r\n  }\r\n  function candidateSize(size) {\r\n    Dispatch(JobsDetailsActions.setJobsDatasize(size));\r\n  }\r\n\r\n  function handleJobDetails(job_id) {\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: \"jobDetails\",\r\n        id: job_id,\r\n      })\r\n    );\r\n    // ReloadPage();\r\n  }\r\n  const handleReset = () => {\r\n    setShowLoader(true); // Set loader to true\r\n\r\n    Dispatch(\r\n      JobsDetailsActions.setJobList({\r\n        assignTo: localStorage.getItem(\"adminID\"),\r\n        priority: null,\r\n        companyName: \"\",\r\n        area: [],\r\n        benefits: [],\r\n        gender: null,\r\n        industry: [],\r\n        jobCategory: [],\r\n        jobExp: -1,\r\n        jobMaxExp: -1,\r\n        jobLocation: [],\r\n        keyskills: [],\r\n        qualification: [],\r\n        employerId: -1,\r\n        salary: -1,\r\n        maxSalary: -1,\r\n        pages: 1,\r\n        size: 10,\r\n        createdTime: \"2021-01-01\",\r\n        endDate: convertDateYYYYMMDD(new Date()),\r\n      })\r\n    );\r\n\r\n    // Fetch data after resetting\r\n    getFilteredJobs(JobFilter)\r\n      .then((data) => {\r\n        console.log(data, \"data\");\r\n        Dispatch(JobsDetailsActions.setJobList(data));\r\n\r\n        setpageCount(\r\n          Math.ceil(\r\n            (data.length > 0 ? data[0].total_count : 10) / JobFilter.size\r\n          )\r\n        );\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <div className={`${FBstyle.FilterHead}`}>\r\n        {\" \"}\r\n        <div className=\"d-flex \">\r\n          Show {\"  \"}\r\n          <select\r\n            name=\"\"\r\n            id=\"\"\r\n            className=\"px-1 py-1 mx-2\"\r\n            onChange={(event) => candidateSize(event.target.value)}\r\n          >\r\n            <option selected value=\"10\">\r\n              10\r\n            </option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"30\">30</option>\r\n          </select>\r\n          {\"   \"}\r\n          Entries\r\n        </div>\r\n        <div\r\n          className=\"p-1 success me-2 mx-2 ms-auto\"\r\n          onClick={handleReset}\r\n          // style={{ : \"#169C50\", color: \"white\" }}\r\n        >\r\n          <LuRefreshCcw />\r\n        </div>\r\n        <JobsFilter />\r\n      </div>\r\n      <div>\r\n        <div className={`${FBstyle.Container}`}>\r\n          <div className={`table-responsive-sm ${FBstyle.responsive}`}>\r\n            <div style={{ minWidth: 300 }}>\r\n              <TableContainer className={`${FBstyle.TableContainer}`}>\r\n                <Table stickyHeader aria-label=\"sticky table\" className={``}>\r\n                  <TableHead className={`${FBstyle.Header}`}>\r\n                    <TableRow>\r\n                      <StyledTableCell>Company Name</StyledTableCell>\r\n                      <StyledTableCell>Mobile Number</StyledTableCell>\r\n                      <StyledTableCell>Job Category</StyledTableCell>\r\n                      {/* <StyledTableCell>Experience</StyledTableCell> */}\r\n                      <StyledTableCell>Qualification</StyledTableCell>\r\n                      {/* <StyledTableCell>KeySkills</StyledTableCell> */}\r\n                      <StyledTableCell>City</StyledTableCell>\r\n                      <StyledTableCell>Area</StyledTableCell>{\" \"}\r\n                      <StyledTableCell>Created on</StyledTableCell>\r\n                      <StyledTableCell>Status</StyledTableCell>\r\n                      {/* <StyledTableCell>Status</StyledTableCell> */}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {JobFilterList.length > 0 ? (\r\n                      <>\r\n                        {JobFilterList.map((jobsdata, i) => {\r\n                          return (\r\n                            <>\r\n                              <TableRow\r\n                                key={i}\r\n                                sx={{\r\n                                  \"&:last-child td, &:last-child th\": {\r\n                                    border: 0,\r\n                                  },\r\n                                }}\r\n                                // onClick={(e) => {\r\n                                //   // alert(candidate.facebookMetaLead.id);\r\n                                //   setCurrentMetaDetail(\r\n                                //     candidate.facebookMetaLead\r\n                                //   );\r\n                                // }}\r\n                              >\r\n                                <StyledTableCell\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  className=\"text-primary \"\r\n                                  title={jobsdata.company_name}\r\n                                  onClick={() => {\r\n                                    handleJobDetails(jobsdata.job_id);\r\n                                  }}\r\n                                >\r\n                                  {jobsdata.company_name\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(jobsdata.company_name),\r\n                                        20\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  {jobsdata.mobile_number\r\n                                    ? String(jobsdata.mobile_number).slice(\r\n                                        0,\r\n                                        10\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell title={jobsdata.job_category}>\r\n                                  {jobsdata.job_category\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(jobsdata.job_category),\r\n                                        20\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                {/* <StyledTableCell>\r\n                                  {`${jobsdata.job_min_exp} year(s)`}\r\n                                </StyledTableCell> */}\r\n                                <StyledTableCell\r\n                                  title={jobsdata.pref_qualification}\r\n                                >\r\n                                  {jobsdata.pref_qualification\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(\r\n                                          jobsdata.pref_qualification\r\n                                        ),\r\n                                        20\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell>\r\n                                {/* <StyledTableCell title={jobsdata.keyskills}>\r\n                                  {jobsdata.keyskills\r\n                                    ? textTruncate(\r\n                                        capitalizeWords(jobsdata.keyskills),\r\n                                        20\r\n                                      )\r\n                                    : \"-\"}\r\n                                </StyledTableCell> */}\r\n\r\n                                <StyledTableCell>\r\n                                  {jobsdata.job_city}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  {jobsdata.area}\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  <DDMMYYYY_formate\r\n                                    dateValue={jobsdata.created_time}\r\n                                  />\r\n                                </StyledTableCell>\r\n                                <StyledTableCell>\r\n                                  {jobsdata.job_status === \"C\" ? (\r\n                                    <span className=\"text-danger\">\r\n                                      <b>Closed</b>\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span className=\"text-success\">\r\n                                      <b>Open</b>\r\n                                    </span>\r\n                                  )}\r\n                                   {jobsdata.collar_type ===\r\n                                    \"MidSenior Category\" && (\r\n                                    <img\r\n                                      src={whiteCollar}\r\n                                      alt=\"\"\r\n                                      style={{ width: \"30px\", height: \"30px\", marginLeft: \"15px\" }}\r\n                                      title=\"MidSenior Category\"\r\n                                    />\r\n                                  )}\r\n                                   {jobsdata.collar_type ===\r\n                                    \"Operator Category\" && (\r\n                                    <img\r\n                                      src={blueCollar}\r\n                                      alt=\"\"\r\n                                      style={{ width: \"30px\", height: \"30px\", marginLeft: \"15px\" }}\r\n                                      title=\"Operator Category\"\r\n                                    />\r\n                                  )}\r\n                                </StyledTableCell>\r\n                              </TableRow>\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </>\r\n                    ) : (\r\n                      <TableRow>\r\n                        <TableCell colSpan={8} align=\"center\">\r\n                          <p className=\"text-danger\">Not found</p>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <>\r\n                <Backdrop\r\n                  sx={{\r\n                    color: \"#fff\",\r\n                    zIndex: (theme) => theme.zIndex.drawer + 1,\r\n                  }}\r\n                  open={showLoader}\r\n                >\r\n                  <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center align-items-center mb-3 position-absolute bottom-0 start-50 translate-middle-x\">\r\n          <Stack spacing={2}>\r\n            <Pagination\r\n              count={pageCount}\r\n              variant=\"outlined\"\r\n              shape=\"rounded\"\r\n              color=\"success\"\r\n              boundaryCount={1}\r\n              siblingCount={0}\r\n              onChange={candidatePagination}\r\n              size=\"medium\"\r\n            />\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default JobsTable;\r\n"],"names":["JobFilter","useSelector","state","JobsDetailsDetails","JobsData","JobFilterRedDot","refreshRedDot","create","createdTime","ended","endDate","showFilter","setShowFilter","useState","Dispatch","useDispatch","adminList","setAdminList","selectedOptions","setSelectedOptions","filterOptions","setFilteredOptions","anchorEl","setAnchorEl","React","showCustom","setshowCustom","open","Boolean","validationErrors","setValidationErrors","start","end","adminDetails","initialFilterObj","assignTo","localStorage","getItem","priority","companyName","area","benefits","gender","industry","jobCategory","jobExp","jobMaxExp","jobLocation","keyskills","qualification","employerId","salary","maxSalary","pages","size","convertDateYYYYMMDD","Date","dateFilterType","options","setOptions","filteredObj","setFilteredObj","showRedDot","setShowRedDot","dateRange","setDateRange","useEffect","getJobFilterOptions","then","data","length","forEach","option","category","prev","updatedAreas","includes","filter","el","map","push","updatedBenefits","updatedSkills","updatedQualifications","updatedIndustries","updatedJobLocations","updatedJobCategory","categoryList","handleDateSelect","val","selectedOption","today","startDate","setDate","getDate","toISOString","split","setMonth","getMonth","handleCustomDate","value","type","target","console","log","ExpMinandMax","label","handleExperienceChange","e","name","handleSalary","id","_jsxs","children","_jsx","className","concat","FBStyle","Filterbutton","variant","onClick","BiFilterAlt","style","backgroundColor","width","height","borderRadius","MyModal","ModalContainer","childComponent","_Fragment","preventDefault","JobsDetailsActions","setJobsData","cursor","fontSize","AiOutlineClose","BoxContainerWidth","onSubmit","isFilterApplied","setJobsRedDot","handleSubmit","Stack","Autocomplete","multiple","getOptionLabel","filterSelectedOptions","onChange","handleOptionChange","event","values","renderInput","params","TextField","placeholder","fullWidth","handleFieldChange","field","FormControl","undefined","currentTarget","Menu","onClose","handleClose","MenuListProps","MenuItem","zIndex","minWidth","htmlFor","min","max","isFormValid","isValid","disableClearable","reason","handlePriorityChange","InputProps","select","handleGenderChange","handleClear","search","sx","StyledTableCell","styled","TableCell","_ref","theme","tableCellClasses","head","color","body","JobFilterList","JobsList","pageCount","setpageCount","showLoader","setShowLoader","getFilteredJobs","setJobList","Math","ceil","total_count","FBstyle","FilterHead","candidateSize","setJobsDatasize","selected","handleReset","finally","LuRefreshCcw","JobsFilter","Container","responsive","TableContainer","Table","stickyHeader","TableHead","Header","TableRow","TableBody","jobsdata","i","border","title","company_name","job_id","commonPopupActions","setShowPopup","textTruncate","capitalizeWords","mobile_number","String","slice","job_category","pref_qualification","job_city","DDMMYYYY_formate","dateValue","created_time","job_status","collar_type","src","whiteCollar","alt","marginLeft","blueCollar","colSpan","align","Backdrop","drawer","CircularProgress","spacing","Pagination","count","shape","boundaryCount","siblingCount","page","currentPage","setJobsDataPage"],"sourceRoot":""}