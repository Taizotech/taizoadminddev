{"version":3,"file":"static/js/741.49044155.chunk.js","mappings":"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","sources":["pages/Candidate/CandidateRegistered/RegisterCandidateFilter.js","pages/Candidate/CandidateRegistered/RegisteredCandidateTable.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable eqeqeq */\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport { AiOutlineClose, AiOutlinePhone } from \"react-icons/ai\";\r\nimport { BiFilterAlt } from \"react-icons/bi\";\r\nimport { MyModal, convertDateYYYYMMDD } from \"../../../utility\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FBStyle from \"../FacebookMeta/candidateFacebookMeta.module.scss\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport registercandidatestyle from \"./RegisteredCandidate.module.scss\";\r\nimport {\r\n  GetAllsdminDetails,\r\n  GetITICourses,\r\n  GetPGCourses,\r\n  GetUGCourses,\r\n  GetdiplomaCourses,\r\n  getJobFilterOptions,\r\n} from \"../../../apiServices\";\r\nimport { CandidateRegisteredActions } from \"../../../redux-store/store\";\r\nimport { Autocomplete, MenuItem, TextField } from \"@mui/material\";\r\nimport { FormControl, Menu } from \"@material-ui/core\";\r\n\r\nfunction RegisterCandidateFilter() {\r\n  const Dispatch = useDispatch();\r\n  const filterDetails = useSelector(\r\n    (state) => state.CandidateRegistered.filterData\r\n  );\r\n  const [showFilter, setShowFilter] = useState(false);\r\n\r\n  const [adminList, setAdminList] = useState([]);\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [showCustom, setshowCustom] = useState(false);\r\n\r\n  const open = Boolean(anchorEl);\r\n  const handleDateClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const [validationErrors, setValidationErrors] = useState({\r\n    start: false,\r\n    end: false,\r\n  });\r\n\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n  // console.log(adminDetails);\r\n\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n\r\n  let initialFilterObj = {\r\n    adminId: isSuperAdmin ? -1 : localStorage.getItem(\"adminID\"),\r\n    mobileNumber: \"\",\r\n    gender: \"Both\",\r\n    industry: [],\r\n    jobCategory: [],\r\n    eligibility: null,\r\n    qualification: [],\r\n    candidateType: null,\r\n    specification: [],\r\n    skills: [],\r\n    prefLocation: [],\r\n    passed_out_year: -1,\r\n    experience: -1,\r\n    maxExperience: -1,\r\n    pages: 1,\r\n    size: 10,\r\n    createdTime: \"2020-01-01\",\r\n    endDate: convertDateYYYYMMDD(new Date()),\r\n    dateFilterType: \"\",\r\n    followUpDate2: \"\",\r\n    followUpDate1: \"\",\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  // const [formData, setFormData] = useState(initialState);\r\n  const [options, setOptions] = useState({\r\n    Industries: [],\r\n    Jobrole: [],\r\n    keySkills: [],\r\n    Qualification: [],\r\n    specification: [],\r\n    prefLocation: [],\r\n  });\r\n\r\n  const [filteredObj, setFilteredObj] = useState({\r\n    adminId: isSuperAdmin ? -1 : localStorage.getItem(\"adminID\"),\r\n    mobileNumber: filterDetails.mobileNumber,\r\n    gender: filterDetails.gender,\r\n    industry: filterDetails.industry,\r\n    jobCategory: filterDetails.jobCategory,\r\n    eligibility: filterDetails.eligibility,\r\n    qualification: filterDetails.qualification,\r\n    candidateType: null,\r\n    specification: filterDetails.specification,\r\n    skills: filterDetails.skills,\r\n    prefLocation: filterDetails.prefLocation,\r\n    passed_out_year: -1,\r\n    experience: filterDetails.experience,\r\n    maxExperience: filterDetails.maxExperience,\r\n    pages: filterDetails.pages,\r\n    size: filterDetails.size,\r\n    createdTime: filterDetails.createdTime,\r\n    endDate: filterDetails.endDate,\r\n    followUpDate1: filterDetails.followUpDate1,\r\n    followUpDate2: filterDetails.followUpDate2,\r\n  });\r\n\r\n  const [showRedDot, setShowRedDot] = useState(false);\r\n\r\n  const [dateRange, setDateRange] = useState({\r\n    start: filterDetails.createdTime,\r\n    end: filterDetails.endDate,\r\n    dateFilterType: filterDetails.dateFilterType,\r\n  });\r\n  useEffect(() => {\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateListFilter(\r\n        initialFilterObj\r\n      )\r\n    );\r\n\r\n    setDateRange({\r\n      start: \"2020-01-01\",\r\n      end: convertDateYYYYMMDD(new Date()),\r\n      dateFilterType: \"\",\r\n    });\r\n    setFilteredObj(initialFilterObj);\r\n    setShowRedDot(false);\r\n  }, []);\r\n  function prefillMultiSelection(type) {\r\n    let array2 = [];\r\n    let array1 = [];\r\n    switch (type) {\r\n      case \"keySkills\":\r\n        array2 = [...options.keySkills];\r\n        array1 = [...filterDetails.skills];\r\n\r\n        break;\r\n\r\n      case \"qualification\":\r\n        array2 = [...options.Qualification];\r\n        array1 = [...filterDetails.qualification];\r\n        break;\r\n\r\n      case \"prefLocation\":\r\n        array2 = [...options.prefLocation];\r\n        array1 = [...filterDetails.prefLocation];\r\n        break;\r\n\r\n      case \"industry\":\r\n        array2 = [...options.industry];\r\n        array1 = [...filterDetails.industry];\r\n        break;\r\n\r\n      case \"jobCategory\":\r\n        array2 = [...options.Jobrole];\r\n        array1 = [...filterDetails.jobCategory];\r\n\r\n        break;\r\n\r\n      case \"specification\":\r\n        array2 = [...options.specification];\r\n        array1 = [...filterDetails.specification];\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    if (type != \"specification\") {\r\n      const filteredArray = array2.filter((item) =>\r\n        array1.includes(item.options)\r\n      );\r\n      // console.log(filteredArray, array1, array2, \"filteredArray\");\r\n      return filteredArray;\r\n    } else {\r\n      const filteredArray = array2.filter((item) =>\r\n        array1.includes(item.courses)\r\n      );\r\n\r\n      return filteredArray;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getJobFilterOptions().then((data) => {\r\n      setOptions((prevOptions) => ({\r\n        ...prevOptions,\r\n        Industries: data.filter((el) => el.category == \"industry\"),\r\n        Jobrole: data.filter((el) => el.category == \"job category\"),\r\n        keySkills: data.filter((element) => element.category == \"skills\"),\r\n        prefLocation: data.filter((element) => element.category == \"city\"),\r\n        Qualification: data.filter(\r\n          (element) => element.category == \"qualification\"\r\n        ),\r\n      }));\r\n    });\r\n\r\n    GetAllsdminDetails()\r\n      .then((data) => {\r\n        const activeAdmins = data.filter((item) => !item.Deactived);\r\n        setAdminList(activeAdmins);\r\n      })\r\n      .catch(() => {\r\n        alert(\"Something Went wrong\");\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const apiPromises = [\r\n      GetITICourses(),\r\n      GetdiplomaCourses(),\r\n      GetUGCourses(),\r\n      GetPGCourses(),\r\n    ];\r\n    Promise.all(apiPromises)\r\n      .then((results) => {\r\n        const specificationData = results.map((data) => data.results).flat();\r\n\r\n        setOptions((prevOptions) => ({\r\n          ...prevOptions,\r\n          specification: specificationData,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        // Handle any errors here\r\n        console.error(\"Error fetching and mapping data:\", error);\r\n      });\r\n  }, []);\r\n\r\n  const handleCandidateIDChange = (e) => {\r\n    const value = e.target.value.replace(/\\D/g, \"\");\r\n    const withoutExponential = value.replace(/[eE]/g, \"\");\r\n    const truncatedValue = withoutExponential.slice(0, 10);\r\n    // setCandidateidnum(truncatedValue);\r\n    setFilteredObj((prev) => ({ ...prev, mobileNumber: truncatedValue }));\r\n  };\r\n\r\n  // const updateIndustry = (value) => {\r\n  //   // to update industry\r\n  //   if (!value.length == 0) {\r\n  //     value.forEach((element) => {\r\n  //       setFilteredObj((prev) => {\r\n  //         let updatedIndustry = [...prev.industry];\r\n\r\n  //         if (!updatedIndustry.includes(element.options)) {\r\n  //           updatedIndustry.push(element.options);\r\n  //         } else {\r\n  //           updatedIndustry = value\r\n  //             .filter((el) => el.category === \"industry\")\r\n  //             .map((el) => el.options);\r\n  //         }\r\n\r\n  //         return { ...prev, industry: updatedIndustry };\r\n  //       });\r\n  //     });\r\n  //   } else {\r\n  //     setFilteredObj((prev) => ({ ...prev, industry: [] }));\r\n  //   }\r\n  // };\r\n\r\n  const updateJobCategory = (value) => {\r\n    // to update job category\r\n    if (!value.length == 0) {\r\n      value.forEach((element) => {\r\n        setFilteredObj((prev) => {\r\n          let updatedcategory = [...prev.jobCategory];\r\n\r\n          if (!updatedcategory.includes(element)) {\r\n            // updatedcategory.push(element.options);\r\n            updatedcategory.push(element);\r\n          } else {\r\n            updatedcategory = value.filter(\r\n              (el) => el.category === \"job category\"\r\n            );\r\n            // .map((el) => el.options);\r\n          }\r\n\r\n          return { ...prev, jobCategory: updatedcategory };\r\n        });\r\n      });\r\n    } else {\r\n      setFilteredObj((prev) => ({ ...prev, jobCategory: [] }));\r\n    }\r\n  };\r\n\r\n  const updateSkills = (value) => {\r\n    // to update skills\r\n    if (!value.length == 0) {\r\n      value.forEach((element) => {\r\n        setFilteredObj((prev) => {\r\n          let updateskills = [...prev.skills];\r\n\r\n          if (!updateskills.includes(element)) {\r\n            updateskills.push(element);\r\n          } else {\r\n            updateskills = value.filter((el) => el.category === \"skills\");\r\n            // .map((el) => el.options);\r\n          }\r\n\r\n          return { ...prev, skills: updateskills };\r\n        });\r\n      });\r\n    } else {\r\n      setFilteredObj((prev) => ({ ...prev, skills: [] }));\r\n    }\r\n  };\r\n\r\n  const updateCity = (value) => {\r\n    // to update cities\r\n    if (!value.length == 0) {\r\n      value.forEach((element) => {\r\n        setFilteredObj((prev) => {\r\n          let updateCity = [...prev.prefLocation];\r\n\r\n          if (!updateCity.includes(element)) {\r\n            updateCity.push(element);\r\n          } else {\r\n            updateCity = value.filter((el) => el.category === \"city\");\r\n            // .map((el) => el.options);\r\n          }\r\n\r\n          return { ...prev, prefLocation: updateCity };\r\n        });\r\n      });\r\n    } else {\r\n      setFilteredObj((prev) => ({ ...prev, prefLocation: [] }));\r\n    }\r\n  };\r\n\r\n  const updatequalification = (value) => {\r\n    // to update qualification\r\n    if (!value.length == 0) {\r\n      value.forEach((element) => {\r\n        setFilteredObj((prev) => {\r\n          let updateQualification = [...prev.qualification];\r\n\r\n          if (!updateQualification.includes(element)) {\r\n            updateQualification.push(element);\r\n          } else {\r\n            updateQualification = value.filter(\r\n              (el) => el.category === \"qualification\"\r\n            );\r\n            // .map((el) => el.options);\r\n          }\r\n\r\n          return { ...prev, qualification: updateQualification };\r\n        });\r\n      });\r\n    } else {\r\n      setFilteredObj((prev) => ({ ...prev, qualification: [] }));\r\n    }\r\n  };\r\n\r\n  const handleSpecification = (value) => {\r\n    if (value.length !== 0) {\r\n      const mappedCourses = value.map((element) => element.courses);\r\n      setFilteredObj((prev) => ({\r\n        ...prev,\r\n        specification: mappedCourses,\r\n      }));\r\n    } else {\r\n      setFilteredObj((prev) => ({ ...prev, specification: [] }));\r\n    }\r\n  };\r\n  // const handleSpecification = (value) => {\r\n  //   if (!value.length == 0) {\r\n  //     value.forEach((element) => {\r\n  //       setFilteredObj((prev) => {\r\n  //         let updateSpecialization = [...prev.specification];\r\n\r\n  //         if (!updateSpecialization.includes(element)) {\r\n  //           updateSpecialization.push(element);\r\n  //         }\r\n\r\n  //         return {\r\n  //           ...prev,\r\n  //           specification: updateSpecialization,\r\n  //         };\r\n  //       });\r\n  //     });\r\n  //   } else {\r\n  //     setFilteredObj((prev) => ({ ...prev, specification: [] }));\r\n  //   }\r\n  // };\r\n\r\n  const handleEligiblityChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    if (name === \"eligiblity\") {\r\n      setFilteredObj((prev) => ({ ...prev, eligibility: value }));\r\n    }\r\n  };\r\n\r\n  const handleGenderChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    if (name === \"Gender\") {\r\n      setFilteredObj((prev) => ({ ...prev, gender: value }));\r\n    }\r\n  };\r\n\r\n  const handleAssignToChange = (e) => {\r\n    const { value, name } = e.target;\r\n    console.log(value, name);\r\n\r\n    setFilteredObj((prev) => ({ ...prev, adminId: value }));\r\n  };\r\n\r\n  const Eligiblity = [\r\n    {\r\n      value: \"Qualified\",\r\n      label: \"Qualified\",\r\n    },\r\n    {\r\n      value: \"Not qualified\",\r\n      label: \"Not qualified\",\r\n    },\r\n  ];\r\n  const Gender = [\r\n    {\r\n      value: \"Male\",\r\n      label: \"Male\",\r\n    },\r\n    {\r\n      value: \"Female\",\r\n      label: \"Female\",\r\n    },\r\n    {\r\n      value: \"Both\",\r\n      label: \"Both\",\r\n    },\r\n  ];\r\n\r\n  const expYearMonth = [\r\n    {\r\n      value: \"0\",\r\n      label: \"0\",\r\n    },\r\n    {\r\n      value: \"1\",\r\n      label: \"1\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"2\",\r\n    },\r\n    {\r\n      value: \"3\",\r\n      label: \"3\",\r\n    },\r\n    {\r\n      value: \"4\",\r\n      label: \"4\",\r\n    },\r\n\r\n    {\r\n      value: \"5\",\r\n      label: \"5\",\r\n    },\r\n    {\r\n      value: \"6\",\r\n      label: \"6\",\r\n    },\r\n    {\r\n      value: \"7\",\r\n      label: \"7\",\r\n    },\r\n    {\r\n      value: \"8\",\r\n      label: \"8\",\r\n    },\r\n    {\r\n      value: \"9\",\r\n      label: \"9\",\r\n    },\r\n    {\r\n      value: \"10\",\r\n      label: \"10\",\r\n    },\r\n    {\r\n      value: \"11\",\r\n      label: \"11\",\r\n    },\r\n  ];\r\n  const handleExperienceChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    if (name === \"experience\") {\r\n      setFilteredObj((prev) => ({ ...prev, experience: value }));\r\n    } else if (name === \"maxExperience\") {\r\n      setFilteredObj((prev) => ({ ...prev, maxExperience: value }));\r\n    }\r\n  };\r\n  const handleDateChange1 = (date) => {\r\n    setFilteredObj((prev) => ({ ...prev, followUpDate1: date }));\r\n    setFilteredObj((prev) => ({ ...prev, followUpDate2: \"\" }));\r\n  };\r\n\r\n  const handleDateChange2 = (date) => {\r\n    setFilteredObj((prev) => ({ ...prev, followUpDate2: date }));\r\n    setFilteredObj((prev) => ({ ...prev, followUpDate1: \"\" }));\r\n  };\r\n  const handleDateSelect = (val) => {\r\n    let selectedOption = val;\r\n    const today = new Date();\r\n    let endDate = new Date();\r\n    // endDate.setDate(endDate.getDate() + 1);\r\n    if (selectedOption === \"lastWeek\") {\r\n      const startDate = new Date();\r\n\r\n      startDate.setDate(today.getDate() - 7);\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 1 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"today\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Today\",\r\n        start: today.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastMonth\") {\r\n      const startDate = new Date();\r\n      startDate.setMonth(startDate.getMonth() - 1);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last Month\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"lastTwoWeeks\") {\r\n      const startDate = new Date(today);\r\n      startDate.setDate(today.getDate() - 13);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Last 2 Week\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"yesterday\") {\r\n      const startDate = new Date();\r\n      startDate.setDate(startDate.getDate() - 1);\r\n\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        dateFilterType: \"Yesterday\",\r\n        start: startDate.toISOString().split(\"T\")[0],\r\n        end: endDate.toISOString().split(\"T\")[0],\r\n      }));\r\n      setAnchorEl(null);\r\n    } else if (selectedOption === \"custom\") {\r\n      setshowCustom(true);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n\r\n  function handleCustomDate(value, type) {\r\n    const val = value.target.value;\r\n\r\n    if (type === \"startDate\") {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        start: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: false,\r\n      }));\r\n    } else {\r\n      setDateRange((prev) => ({\r\n        ...prev,\r\n        end: val,\r\n        dateFilterType: \"custom\",\r\n      }));\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: false,\r\n      }));\r\n    }\r\n  }\r\n\r\n  const isFormValid = () => {\r\n    // Implement your validation logic here\r\n    // For example, you can check if both start and end dates are filled\r\n    const isValid = dateRange.start && dateRange.end;\r\n\r\n    if (!dateRange.start) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        start: true,\r\n      }));\r\n    }\r\n\r\n    if (!dateRange.end) {\r\n      setValidationErrors((prev) => ({\r\n        ...prev,\r\n        end: true,\r\n      }));\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const handleApplyDate = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isFormValid()) {\r\n      // Your submit logic here\r\n      // Proceed with form submission\r\n\r\n      setValidationErrors({\r\n        start: false,\r\n        end: false,\r\n      });\r\n      setshowCustom(false); // Close the modal or perform other actions\r\n    }\r\n  };\r\n  function handleClickCross(e) {\r\n    e.preventDefault();\r\n    postFilter();\r\n  }\r\n\r\n  function postFilter() {\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateListFilter({\r\n        ...filteredObj,\r\n        createdTime: dateRange.start,\r\n        endDate: dateRange.end,\r\n        dateFilterType: dateRange.dateFilterType,\r\n      })\r\n    );\r\n\r\n    setShowFilter(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    // List of keys to be removed\r\n    const keysToRemove = [\"pages\", \"size\", \"endDate\"];\r\n\r\n    let filterObject = { ...filterDetails };\r\n    let initialFilterObject = { ...initialFilterObj };\r\n\r\n    // Remove keys from the object\r\n    keysToRemove.forEach((key) => delete filterObject[key]);\r\n    keysToRemove.forEach((key) => delete initialFilterObject[key]);\r\n\r\n    if (JSON.stringify(filterObject) != JSON.stringify(initialFilterObject)) {\r\n      setShowRedDot(true);\r\n    } else {\r\n      setShowRedDot(false);\r\n    }\r\n  }, [filterDetails]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    postFilter();\r\n  };\r\n  function onClearFilter(e) {\r\n    // e.preventDefault();\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateListFilter(\r\n        initialFilterObj\r\n      )\r\n    );\r\n\r\n    setDateRange({\r\n      start: \"2020-01-01\",\r\n      end: convertDateYYYYMMDD(new Date()),\r\n      dateFilterType: \"\",\r\n    });\r\n    setFilteredObj(initialFilterObj);\r\n    setShowRedDot(false);\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end\">\r\n        <button\r\n          className={`rounded-pill d-flex align-items-center ${FBStyle.Filterbutton}`}\r\n          variant=\"contained\"\r\n          onClick={() => setShowFilter(true)}\r\n        >\r\n          <BiFilterAlt />\r\n          <p\r\n            style={{\r\n              backgroundColor: showRedDot ? \"red\" : \"transparent\",\r\n              width: \"8px\",\r\n              height: \"8px\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          ></p>\r\n          Filter\r\n        </button>\r\n      </div>\r\n      {showFilter && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <>\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <h4 className=\"text-center mb-2\">Filter by</h4>\r\n                  <h3>\r\n                    <span\r\n                      onClick={handleClickCross}\r\n                      className=\"btn btn-outline-danger\"\r\n                      style={{ cursor: \"pointer\", fontSize: 15 }}\r\n                    >\r\n                      <AiOutlineClose />\r\n                    </span>\r\n                  </h3>\r\n                </div>\r\n                <div className={`${registercandidatestyle.BoxContainerWidth}`}>\r\n                  <form\r\n                    onSubmit={(e) => {\r\n                      handleSubmit(e);\r\n                    }}\r\n                  >\r\n                    <>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            label=\"Mobile number\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            value={filteredObj.mobileNumber}\r\n                            defaultValue={filterDetails.mobileNumber}\r\n                            onChange={handleCandidateIDChange}\r\n                            inputProps={{ maxLength: 10 }}\r\n                            InputProps={{\r\n                              startAdornment: (\r\n                                <span\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <AiOutlinePhone\r\n                                    style={{ marginRight: \"5px\" }}\r\n                                  />{\" \"}\r\n                                  +91\r\n                                </span>\r\n                              ),\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        {/* <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <Autocomplete\r\n                            limitTags={1}\r\n                            name=\"industries\"\r\n                            multiple\r\n                            id=\"tags-outlined\"\r\n                            onChange={(event, value) => {\r\n                              updateIndustry(value);\r\n                            }}\r\n                            options={(options.Industries || []).map(\r\n                              (option) => option\r\n                            )}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Job industries\"\r\n                                placeholder=\"Favorites\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div> */}\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <FormControl variant=\"outlined\" fullWidth>\r\n                            <TextField\r\n                              label=\"Registered on\"\r\n                              id=\"basic-button\"\r\n                              value={`${dateRange.dateFilterType}`}\r\n                              // value={`${dateRange.start} - ${dateRange.end}`}\r\n                              aria-controls={open ? \"basic-menu\" : undefined}\r\n                              aria-haspopup=\"true\"\r\n                              aria-expanded={open ? \"true\" : undefined}\r\n                              onClick={handleDateClick}\r\n                            ></TextField>\r\n                            <Menu\r\n                              id=\"basic-menu\"\r\n                              anchorEl={anchorEl}\r\n                              open={open}\r\n                              onClose={handleClose}\r\n                              MenuListProps={{\r\n                                \"aria-labelledby\": \"basic-button\",\r\n                              }}\r\n                            >\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"today\");\r\n                                }}\r\n                                style={{ width: \"210px\" }}\r\n                              >\r\n                                Today\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"yesterday\");\r\n                                }}\r\n                              >\r\n                                Yesterday\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastWeek\");\r\n                                }}\r\n                              >\r\n                                Last 1 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastTwoWeeks\");\r\n                                }}\r\n                              >\r\n                                Last 2 Week\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"lastMonth\");\r\n                                }}\r\n                              >\r\n                                Last Month\r\n                              </MenuItem>\r\n                              <MenuItem\r\n                                onClick={() => {\r\n                                  handleDateSelect(\"custom\");\r\n                                }}\r\n                              >\r\n                                Custom Date\r\n                              </MenuItem>\r\n                            </Menu>\r\n                          </FormControl>\r\n                          {/*  */}\r\n                          {showCustom && (\r\n                            <MyModal>\r\n                              <ModalContainer\r\n                                zIndex={1005}\r\n                                childComponent={\r\n                                  <div\r\n                                    style={{\r\n                                      minWidth: \"400px\",\r\n                                      width: \"auto\",\r\n                                    }}\r\n                                  >\r\n                                    <>\r\n                                      <div>\r\n                                        <form>\r\n                                          <p className=\"text-center \">\r\n                                            Select Custom Date{\" \"}\r\n                                          </p>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"start\">From</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.start\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"start\"\r\n                                              onChange={(value) =>\r\n                                                handleCustomDate(\r\n                                                  value,\r\n                                                  \"startDate\"\r\n                                                )\r\n                                              }\r\n                                              name=\"trip-start\"\r\n                                              min=\"2020-01-01\"\r\n                                              max={\r\n                                                new Date()\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                              }\r\n                                            />\r\n                                            {validationErrors.start && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                Start date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"mt-2\">\r\n                                            <label htmlFor=\"end\">To</label>\r\n                                            <input\r\n                                              className={`form-control ${\r\n                                                validationErrors.end\r\n                                                  ? \"is-invalid\"\r\n                                                  : \"\"\r\n                                              }`}\r\n                                              style={{ width: \"100%\" }}\r\n                                              type=\"date\"\r\n                                              id=\"end\"\r\n                                              onChange={(value) =>\r\n                                                handleCustomDate(\r\n                                                  value,\r\n                                                  \"endDate\"\r\n                                                )\r\n                                              }\r\n                                              name=\"trip-end\"\r\n                                              min=\"2020-01-01\"\r\n                                              max={\r\n                                                new Date()\r\n                                                  .toISOString()\r\n                                                  .split(\"T\")[0]\r\n                                              }\r\n                                            />\r\n                                            {validationErrors.end && (\r\n                                              <div className=\"invalid-feedback\">\r\n                                                End date is required.\r\n                                              </div>\r\n                                            )}\r\n                                          </div>\r\n                                          <div className=\"d-flex justify-content-end mt-3 \">\r\n                                            <button\r\n                                              onClick={() => {\r\n                                                setValidationErrors({\r\n                                                  start: false,\r\n                                                  end: false,\r\n                                                });\r\n                                                setshowCustom(false);\r\n                                              }}\r\n                                              style={{\r\n                                                backgroundColor: \"#b2261c\",\r\n                                              }}\r\n                                              className=\"btn rounded-pill text-white px-4  me-2\"\r\n                                            >\r\n                                              Close\r\n                                            </button>\r\n                                            <button\r\n                                              onClick={handleApplyDate}\r\n                                              // color=\"primary\"\r\n                                              className=\"btn rounded-pill text-white px-4\"\r\n                                              style={{\r\n                                                backgroundColor: \"#169C50\",\r\n                                              }}\r\n                                            >\r\n                                              Apply\r\n                                            </button>\r\n                                          </div>\r\n                                        </form>\r\n                                      </div>\r\n                                    </>\r\n                                  </div>\r\n                                }\r\n                              />\r\n                            </MyModal>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <Autocomplete\r\n                            limitTags={1}\r\n                            multiple\r\n                            id=\"tags-outlined\"\r\n                            // options={candiOptions.Industries}\r\n                            onChange={(event, value) => {\r\n                              updateJobCategory(value);\r\n                            }}\r\n                            options={(options.Jobrole || []).map(\r\n                              (option) => option\r\n                            )}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            value={filteredObj.jobCategory}\r\n                            defaultValue={prefillMultiSelection(\"jobCategory\")}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Job category\"\r\n                                placeholder=\"Favorites\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <Autocomplete\r\n                            limitTags={1}\r\n                            multiple\r\n                            id=\"tags-outlined\"\r\n                            options={(options.keySkills || []).map(\r\n                              (option) => option\r\n                            )}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            onChange={(event, value) => {\r\n                              updateSkills(value);\r\n                            }}\r\n                            value={filteredObj.skills}\r\n                            defaultValue={prefillMultiSelection(\"keySkills\")}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"key skill\"\r\n                                placeholder=\"Favorites\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row mt-3\">\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <Autocomplete\r\n                            limitTags={1}\r\n                            multiple\r\n                            id=\"tags-outlined\"\r\n                            options={(options.Qualification || []).map(\r\n                              (option) => option\r\n                            )}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            filterSelectedOptions\r\n                            onChange={(event, value) => {\r\n                              updatequalification(value);\r\n                            }}\r\n                            value={filteredObj.qualification}\r\n                            defaultValue={prefillMultiSelection(\r\n                              \"qualification\"\r\n                            )}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Qualification\"\r\n                                placeholder=\"Qualification\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          {\" \"}\r\n                          <Autocomplete\r\n                            limitTags={1}\r\n                            multiple\r\n                            id=\"tags-outlined\"\r\n                            options={options.specification}\r\n                            getOptionLabel={(option) => option.courses}\r\n                            filterSelectedOptions\r\n                            onChange={(event, value) => {\r\n                              console.log(value, \"Valluee\");\r\n                              handleSpecification(value);\r\n                            }}\r\n                            // value={filteredObj.specification}\r\n                            value={filteredObj.specification.map((course) => ({\r\n                              courses: course,\r\n                            }))}\r\n                            defaultValue={prefillMultiSelection(\r\n                              \"specification\"\r\n                            )}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Specialization\"\r\n                                placeholder=\"specialization\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <Autocomplete\r\n                            limitTags={1}\r\n                            multiple\r\n                            id=\"tags-outlined\"\r\n                            options={(options.prefLocation || []).map(\r\n                              (option) => option\r\n                            )}\r\n                            getOptionLabel={(option) => `${option.options}`}\r\n                            onChange={(event, value) => {\r\n                              updateCity(value);\r\n                            }}\r\n                            value={filteredObj.prefLocation}\r\n                            defaultValue={prefillMultiSelection(\"prefLocation\")}\r\n                            filterSelectedOptions\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"City\"\r\n                                placeholder=\"Favorites\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <TextField\r\n                            onChange={(e) => handleEligiblityChange(e)}\r\n                            name=\"eligiblity\"\r\n                            id=\"eligiblity\"\r\n                            className=\"form-control\"\r\n                            select\r\n                            label=\"Status\"\r\n                            value={filteredObj.eligibility}\r\n                          >\r\n                            {Eligiblity.map((option) => (\r\n                              <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row mt-3\">\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <TextField\r\n                            onChange={(e) => handleExperienceChange(e)}\r\n                            name=\"experience\"\r\n                            id=\"experience\"\r\n                            className=\"form-control\"\r\n                            select\r\n                            label=\"Min Experience\"\r\n                            value={filteredObj.experience}\r\n                          >\r\n                            {expYearMonth.map((option) => (\r\n                              <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <TextField\r\n                            onChange={(e) => handleExperienceChange(e)}\r\n                            name=\"maxExperience\"\r\n                            id=\"maxExperience\"\r\n                            className=\"form-control\"\r\n                            select\r\n                            label=\"Max Experience\"\r\n                            value={filteredObj.maxExperience}\r\n                          >\r\n                            {expYearMonth.map((option) => (\r\n                              <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          <TextField\r\n                            onChange={(e) => handleGenderChange(e)}\r\n                            name=\"Gender\"\r\n                            id=\"Gender\"\r\n                            className=\"form-control\"\r\n                            select\r\n                            label=\"Gender\"\r\n                            value={filteredObj.gender}\r\n                          >\r\n                            {Gender.map((option) => (\r\n                              <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </TextField>\r\n                        </div>\r\n                        <div className=\"col-md-3 mt-1 mt-sm-0\">\r\n                          {adminList && isSuperAdmin && (\r\n                            <TextField\r\n                              onChange={(e) => handleAssignToChange(e)}\r\n                              name=\"AssignedTo\"\r\n                              id=\"AssignedTo\"\r\n                              className=\"form-control\"\r\n                              select\r\n                              label=\"Assigned To\"\r\n                              // value={filteredObj.adminId}\r\n                              defaultValue={filteredObj.adminId}\r\n                            >\r\n                              <MenuItem value={-1}>ALL</MenuItem>\r\n                              {adminList.map((el) => (\r\n                                <MenuItem key={el.id} value={el.id}>\r\n                                  {el.userName}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </TextField>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row mt-3\">\r\n                        <div className=\"col-md-2\">\r\n                          <div>\r\n                            <label htmlFor=\"\">Follow up Date 1</label>\r\n                            <DatePicker\r\n                              selected={filteredObj.followUpDate1}\r\n                              dateFormat=\"dd/MM/yyyy\"\r\n                              onChange={handleDateChange1}\r\n                              className=\"form-control mt-1\"\r\n                              // withPortal={true}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-1 text-center mt-4\">\r\n                          {\" \"}\r\n                          <b>OR</b>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                          <div>\r\n                            <label htmlFor=\"\">Follow up Date 2</label>\r\n                            <DatePicker\r\n                              selected={filteredObj.followUpDate2}\r\n                              onChange={handleDateChange2}\r\n                              dateFormat=\"dd/MM/yyyy\"\r\n                              className=\"form-control mt-1\"\r\n                              // withPortal={true}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"d-flex flex-row gap-2 justify-content-end mt-4\">\r\n                        <button\r\n                          className={`rounded-pill ${FBStyle.Filterbutton}`}\r\n                          variant=\"outlined\"\r\n                          type=\"button\"\r\n                          onClick={(e) => {\r\n                            onClearFilter(e);\r\n                          }}\r\n                        >\r\n                          Clear All\r\n                        </button>\r\n                        <button\r\n                          className={`rounded-pill ${FBStyle.search}`}\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          sx={{ minWidth: \"150px\" }}\r\n                        >\r\n                          Search\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  </form>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterCandidateFilter;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable react/jsx-pascal-case */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\";\r\n\r\nimport {\r\n  TextField,\r\n  Box,\r\n  Button,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Pagination,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  FormControl,\r\n  Autocomplete,\r\n} from \"@mui/material\";\r\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport SuccessTick from \"../../../components/success_tick\";\r\nimport { LuRefreshCcw } from \"react-icons/lu\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  GetAllsdminDetails,\r\n  PutCandidateIsQualified,\r\n  getCandidateLead,\r\n  getcandidateDetails,\r\n  postCandidate,\r\n  PostFollowup,\r\n  GetFollowUpEvents,\r\n  PutCandidateInterviewFollowup,\r\n  GetCompanyName,\r\n} from \"../../../apiServices\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport dayjs from \"dayjs\";\r\nimport canLeadStyle from \"../CandidateLeadTable/candidateLead.module.scss\";\r\nimport RegisterCandidateFilter from \"./RegisterCandidateFilter\";\r\nimport { DemoContainer } from \"@mui/x-date-pickers/internals/demo\";\r\nimport { DateTimePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport {\r\n  CandidateRegisteredActions,\r\n  commonPopupActions,\r\n} from \"../../../redux-store/store\";\r\nimport {\r\n  DMMMYYYY_formate,\r\n  MyModal,\r\n  capitalizeWords,\r\n  textTruncate,\r\n} from \"../../../utility\";\r\nimport { GoDotFill } from \"react-icons/go\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport FBStyle from \"../FacebookMeta/candidateFacebookMeta.module.scss\";\r\nimport { useRef } from \"react\";\r\nimport ModalContainer from \"../../../components/modal_popup\";\r\nimport RegisterCandidateStyle from \"./RegisteredCandidate.module.scss\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#d2d2d2\",\r\n    color: \"#545454f0\",\r\n    padding: \"8px\",\r\n    \"@media (max-width: 992px)\": {},\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    padding: \"8px\",\r\n    fontSize: 14,\r\n    \"@media (max-width: 992px)\": {},\r\n  },\r\n}));\r\n\r\nfunction RegisteredCandidateTable() {\r\n  //     const RegisteredCandidateTable = ({ Id }) => {\r\n  //   const candidateId = Id;\r\n  const CandidateRegisterFilter = useSelector(\r\n    (state) => state.CandidateRegistered.filterData\r\n  );\r\n\r\n  const CanList = useSelector(\r\n    (state) => state.CandidateRegistered.RegisterCandidateList\r\n  );\r\n\r\n  const [currentCandidateDetail, setCurrentCandidateDetails] = useState();\r\n\r\n  // Using the find method to get the candidate with the specified ID\r\n  // const desiredCandidate = CanList.find((candidate) => candidate.candidate_id);\r\n  const [showConfirmationPopup, setShowConfirmPopup] = useState(false);\r\n  const [showConfirmationqualifiedPopup, setShowConfirmQualifiedPopup] =\r\n    useState(false);\r\n  const [isQualifiedDetails, setIsQualifiedDetails] = useState({\r\n    confirmtext: \"\",\r\n    notes: \"\",\r\n    isQualified: \"\",\r\n    openPopup: false,\r\n    candidateId: \"\",\r\n  });\r\n  const [pageCount, setPageCount] = useState({\r\n    totalPages: 0,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n  });\r\n  const [followupError, setFollowupError] = useState({\r\n    dateTime: false,\r\n    addNotes: false,\r\n    selectEvent: false,\r\n  });\r\n  const openFollowup = () => {\r\n    setFollowupOpen(true);\r\n  };\r\n  const [size, setSize] = useState(10);\r\n  const [totalCount, setTotalCount] = useState();\r\n  const [Follownotes, setFollownotes] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n  const [eventData, setEventData] = useState([]);\r\n  const [showSuccess, setShowSuccess] = useState(false);\r\n  const [enableSubmit, setEnableSubmit] = useState(false);\r\n  const [dateTimeError, setDateTimeError] = useState(\"\");\r\n  const [dateTime, setDateTime] = useState(\"\");\r\n  const [formattedDate, setFormattedDate] = useState(null);\r\n  const [followupopen, setFollowupOpen] = useState(false);\r\n  const [showLoader, setShowLoader] = useState(false); // New state for loader\r\n  const adminDetails = useSelector((state) => state.adminDetails);\r\n  const [followUpDateopen, setfollowUpDateopen] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState({\r\n    tentativeInterviewDate: null,\r\n    followUpDate1: null,\r\n  });\r\n  const [validity, setValidity] = useState({\r\n    isFollowDate1: true,\r\n    isFollowDate2: true,\r\n  });\r\n  let isSuperAdmin = adminDetails.roleID == 1;\r\n  const [adminName, setAdminName] = useState([]);\r\n  const [adminid, setAdminId] = useState([]);\r\n  const [companyNames, setCompanyNames] = useState([]);\r\n  const [selectedCompany, setSelectedCompany] = useState(\"\");\r\n  const [companyNameError, setCompanyNameError] = useState(false);\r\n  // const handleFollowSubmit = async () => {\r\n  //   if (!formattedDate) {\r\n  //     setFollowupError((prev) => ({\r\n  //       ...prev,\r\n  //       dateTime: true,\r\n  //     }));\r\n  //     return;\r\n  //   } else if (Follownotes.trim() === \"\") {\r\n  //     setFollowupError((prev) => ({\r\n  //       ...prev,\r\n  //       addNotes: true,\r\n  //     }));\r\n  //     return;\r\n  //   }\r\n  //   // else if (!selectedValue) {\r\n  //   //   setFollowupError((prev) => ({\r\n  //   //     ...prev,\r\n  //   //     selectEvent: true,\r\n  //   //   }));\r\n  //   //   return;\r\n  //   // }\r\n  //   else {\r\n  //     try {\r\n  //       // const formattedDate = dateTime.toISOString();\r\n  //       await PostFollowup(\r\n  //         null,\r\n  //         null,\r\n  //         currentCandidateDetail.candidate_id,\r\n  //         formattedDate,\r\n  //         Follownotes,\r\n  //         \"Candidate\"\r\n  //       );\r\n\r\n  //       setFormattedDate(\"\");\r\n  //       setSelectedValue(\"\");\r\n  //       setFollownotes(\"\");\r\n  //       setShowSuccess(true);\r\n  //       setTimeout(() => {\r\n  //         setShowSuccess(false);\r\n  //         setShowConfirmPopup(false);\r\n  //       }, 3000);\r\n  //       closeFollowup();\r\n  //     } catch (error) {\r\n  //       console.error(\"There was a problem with the API call:\", error);\r\n  //     }\r\n  //   }\r\n  // };\r\n  const handleFollowSubmit = async () => {\r\n    if (!formattedDate) {\r\n      setFollowupError((prev) => ({\r\n        ...prev,\r\n        dateTime: true,\r\n      }));\r\n      return;\r\n    } else if (Follownotes.trim() === \"\") {\r\n      setFollowupError((prev) => ({\r\n        ...prev,\r\n        addNotes: true,\r\n      }));\r\n      return;\r\n    } else {\r\n      try {\r\n        const formattedDateTime = dayjs(dateTime);\r\n        const formattedDate = formattedDateTime.format(\"YYYY-MM-DD\");\r\n        const followUpTime = formattedDateTime.format(\"hh:mm A\");\r\n\r\n        console.log(\"Formatted Date:\", formattedDate);\r\n        console.log(\"Follow-Up Time:\", followUpTime);\r\n\r\n        await PostFollowup(\r\n          null,\r\n          null,\r\n          currentCandidateDetail.candidate_id,\r\n          formattedDate,\r\n          followUpTime,\r\n          Follownotes,\r\n          \"Candidate\"\r\n        );\r\n\r\n        setFormattedDate(\"\");\r\n        setSelectedValue(\"\");\r\n        setFollownotes(\"\");\r\n        setShowSuccess(true);\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setShowConfirmPopup(false);\r\n        }, 3000);\r\n        closeFollowup();\r\n      } catch (error) {\r\n        console.error(\"There was a problem with the API call:\", error);\r\n      }\r\n    }\r\n  };\r\n  const closeFollowup = () => {\r\n    setFollowupOpen(false);\r\n    setFollowupError((prev) => ({\r\n      ...prev,\r\n      dateTime: false,\r\n      addNotes: false,\r\n      selectEvent: false,\r\n    }));\r\n    setFormattedDate(\"\");\r\n    setFollownotes(\"\");\r\n    setSelectedValue(\"\");\r\n    postCandidate(CandidateRegisterFilter).then((data) => {\r\n      console.log(data, \"meta data\");\r\n      Dispatch(CandidateRegisteredActions.setRegisterCandidateList(data));\r\n\r\n      setPageCount((prev) => ({\r\n        ...prev,\r\n        totalPages: Math.ceil(\r\n          (data.length > 0 ? data[0].total_count : 10) / size\r\n        ),\r\n      }));\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    // Fetch follow-up events data when component mounts\r\n    async function fetchEventData() {\r\n      try {\r\n        const data = await GetFollowUpEvents();\r\n        setEventData(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching follow-up events:\", error);\r\n      }\r\n    }\r\n\r\n    fetchEventData();\r\n  }, []);\r\n  useEffect(() => {\r\n    GetAllsdminDetails().then((data) => {\r\n      console.log(data, \"All admin details\");\r\n      const adminNames = data.map((item) => item.userName);\r\n      const adminIds = data.map((item) => item.id);\r\n      setAdminName(adminNames);\r\n      setAdminId(adminIds);\r\n    });\r\n\r\n    let adminId = isSuperAdmin ? -1 : localStorage.getItem(\"adminID\");\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateListFilterAdminId(adminId)\r\n    );\r\n  }, [adminDetails]);\r\n  useEffect(() => {\r\n    console.log(CanList, \"candidateListedjobs\");\r\n  }, [CanList]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const data = await GetCompanyName();\r\n      setCompanyNames(data);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const Dispatch = useDispatch();\r\n\r\n  function currentCanDetails(data) {\r\n    // console.log(data,\"Current Dataaaaaa\");\r\n    setCurrentCandidateDetails(data);\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setShowLoader(true); // Set loader to true\r\n\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateList({\r\n        gender: null,\r\n        mobileNumber: -1,\r\n        assignTo: null,\r\n        status: null,\r\n        industry: null,\r\n        jobCategory: null,\r\n        qualification: null,\r\n        candidateType: null,\r\n        skills: null,\r\n        prefLocation: null,\r\n        eligibility: null,\r\n        passed_out_year: -1,\r\n        specification: null,\r\n        maxExperience: -1,\r\n        experience: -1,\r\n        endDate: null,\r\n        createdTime: null,\r\n        page: 1,\r\n        size: 10,\r\n      })\r\n    );\r\n\r\n    // Fetch data after resetting\r\n    postCandidate(CandidateRegisterFilter)\r\n      .then((data) => {\r\n        // console.log(data, \"meta data\");\r\n        Dispatch(CandidateRegisteredActions.setRegisterCandidateList(data));\r\n\r\n        setPageCount((prev) => ({\r\n          ...prev,\r\n          totalPages: Math.ceil(\r\n            (data.length > 0 ? data[0].total_count : 10) / size\r\n          ),\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   setShowLoader(true); // Set loader to true\r\n\r\n  //   // console.log(CandidateRegisterFilter, \"CandidateRegisterFilter\");\r\n\r\n  //   postCandidate(CandidateRegisterFilter)\r\n  //     .then((data) => {\r\n  //       // console.log(data, \"dataaa\");\r\n  //       if (data) {\r\n  //         Dispatch(CandidateRegisteredActions.setRegisterCandidateList(data));\r\n  //         setTotalCount(data[0].total_count);\r\n  //         setPageCount((prev) => ({\r\n  //           ...prev,\r\n  //           totalPages: Math.ceil(\r\n  //             (data.length > 0 ? data[0].total_count : 10) / size\r\n  //           ),\r\n  //         }));\r\n  //       } else {\r\n  //         console.error(\r\n  //           \"Data received from postCandidate is undefined or null.\"\r\n  //         );\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       alert(\"Something went wrong\" + err);\r\n  //     })\r\n  //     .finally(() => {\r\n  //       setShowLoader(false);\r\n  //     });\r\n  // }, [CandidateRegisterFilter]);\r\n  useEffect(() => {\r\n    setShowLoader(true); // Set loader to true\r\n\r\n    postCandidate(CandidateRegisterFilter)\r\n      .then((data) => {\r\n        // console.log(data, \"dataaa\");\r\n        if (data) {\r\n          Dispatch(CandidateRegisteredActions.setRegisterCandidateList(data));\r\n\r\n          // Check if total_count is available in the response data\r\n          if (data[0] && data[0].total_count !== undefined) {\r\n            setTotalCount(data[0].total_count);\r\n            setPageCount((prev) => ({\r\n              ...prev,\r\n              totalPages: Math.ceil(\r\n                (data.length > 0 ? data[0].total_count : 10) / size\r\n              ),\r\n            }));\r\n          } else {\r\n            // If total_count is not available, set totalCount and totalPages to default values\r\n            setTotalCount(0);\r\n            setPageCount((prev) => ({\r\n              ...prev,\r\n              totalPages: 0,\r\n            }));\r\n            // Dispatch an empty array to CandidateRegisteredActions\r\n            Dispatch(CandidateRegisteredActions.setRegisterCandidateList([]));\r\n          }\r\n        } else {\r\n          console.error(\r\n            \"Data received from postCandidate is undefined or null.\"\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        alert(\"Something went wrong\" + err);\r\n      })\r\n      .finally(() => {\r\n        setShowLoader(false);\r\n      });\r\n  }, [CandidateRegisterFilter]);\r\n\r\n  function candidatePagination(event, page) {\r\n    const currentPage = page;\r\n\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateListFilterPage(currentPage)\r\n    );\r\n  }\r\n\r\n  function handleConfirmationOpenQualify() {\r\n    setShowConfirmQualifiedPopup(true);\r\n  }\r\n\r\n  function handleConfirmationOpen() {\r\n    setShowConfirmPopup(true);\r\n  }\r\n\r\n  const handleCancelClick = () => {\r\n    setShowConfirmQualifiedPopup(false);\r\n  };\r\n\r\n  const handleCancelClicknotqualify = () => {\r\n    setShowConfirmPopup(false);\r\n  };\r\n\r\n  function candidateSize(size) {\r\n    setSize(size);\r\n    Dispatch(\r\n      CandidateRegisteredActions.setRegisterCandidateListFiltersize(size)\r\n    );\r\n  }\r\n  const handleCandidateDetails = async (candidateId, type) => {\r\n    let data;\r\n    if (type === \"RegisterCandidate\") {\r\n      data = await getcandidateDetails(candidateId);\r\n    } else if (type === \"CandidateLead\") {\r\n      data = await getCandidateLead(candidateId);\r\n    }\r\n\r\n    // Dispatch action to show the popup and pass the fetched data\r\n    Dispatch(\r\n      commonPopupActions.setShowPopup({\r\n        name: \"candidateDetails\",\r\n        id: candidateId,\r\n        type: type,\r\n        data: data,\r\n      })\r\n    );\r\n  };\r\n\r\n  const inputRef = {\r\n    qualified: useRef(),\r\n    notQualified: useRef(),\r\n    followup: useRef(),\r\n    // rescheduled: useRef(),\r\n  };\r\n  const handleButtonClick = (refName) => {\r\n    const ref = inputRef[refName];\r\n    if (ref.current) {\r\n      ref.current.click();\r\n    }\r\n  };\r\n  const handleCompanyNameChange = (event, value) => {\r\n    setSelectedCompany(value);\r\n    setCompanyNameError(false); // Clear error when the field changes\r\n  };\r\n  function openIsQualifyPopup(status) {\r\n    // console.log(candidate_id, \"idd\");\r\n    let confirmText = \"\";\r\n    let isQualified;\r\n    if (status == \"qualify\") {\r\n      confirmText = `Are you sure you want to qualify ${currentCandidateDetail.first_name} `;\r\n      isQualified = true;\r\n    } else {\r\n      confirmText = `Are you sure you want to not qualify ${currentCandidateDetail.first_name} `;\r\n      isQualified = false;\r\n    }\r\n\r\n    setIsQualifiedDetails((prev) => ({\r\n      ...prev,\r\n      openPopup: true,\r\n      isQualified: isQualified,\r\n      notes: \"\",\r\n      confirmtext: confirmText,\r\n      candidateId: currentCandidateDetail.candidate_id,\r\n    }));\r\n  }\r\n\r\n  function handleConfirmationClose() {\r\n    setIsQualifiedDetails((prev) => ({\r\n      ...prev,\r\n      openPopup: false,\r\n    }));\r\n  }\r\n  function ConfirmFormSubmit() {\r\n    PutCandidateIsQualified(isQualifiedDetails)\r\n      .then(() => {\r\n        const updatedCanList = CanList.map((candidate) => {\r\n          if (candidate.candidate_id === currentCandidateDetail.candidate_id) {\r\n            return {\r\n              ...candidate,\r\n              qualified: isQualifiedDetails.isQualified ? 1 : 0,\r\n              not_qualified: isQualifiedDetails.isQualified ? 0 : 1,\r\n            };\r\n          }\r\n          return candidate;\r\n        });\r\n        Dispatch(\r\n          CandidateRegisteredActions.setRegisterCandidateList(updatedCanList)\r\n        );\r\n        setShowConfirmPopup(false);\r\n        setShowConfirmQualifiedPopup(false);\r\n        setIsQualifiedDetails((prev) => ({\r\n          ...prev,\r\n          openPopup: false,\r\n        }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  const handleDateChange = (date, type) => {\r\n    setSelectedDate((prevState) => ({\r\n      ...prevState,\r\n      [type]: date,\r\n    }));\r\n\r\n    if (type === \"tentativeInterviewDate\") {\r\n      if (\r\n        selectedDate.followUpDate1 &&\r\n        date &&\r\n        selectedDate.followUpDate1 < date\r\n      ) {\r\n        setSelectedDate((prevState) => ({\r\n          ...prevState,\r\n          followUpDate1: null,\r\n        }));\r\n        setValidity((prevState) => ({\r\n          ...prevState,\r\n          isFollowDate2: false,\r\n        }));\r\n      }\r\n      setValidity((prevState) => ({\r\n        ...prevState,\r\n        isFollowDate1: !!date,\r\n      }));\r\n    } else if (type === \"followUpDate1\") {\r\n      setValidity((prevState) => ({\r\n        ...prevState,\r\n        isFollowDate2: !!date,\r\n      }));\r\n    }\r\n  };\r\n  const dateDiff = Math.ceil(\r\n    (selectedDate.tentativeInterviewDate - new Date()) / (1000 * 60 * 60 * 24)\r\n  );\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!selectedDate.tentativeInterviewDate) {\r\n      setValidity((prevState) => ({\r\n        ...prevState,\r\n        isFollowDate1: false,\r\n      }));\r\n      return;\r\n    } else if (dateDiff >= 4 && !selectedDate.followUpDate1) {\r\n      setValidity((prevState) => ({\r\n        ...prevState,\r\n        isFollowDate2: false,\r\n      }));\r\n      return;\r\n    } else if (!selectedCompany) {\r\n      setCompanyNameError(true);\r\n      return;\r\n    }\r\n\r\n    PutCandidateInterviewFollowup(\r\n      currentCandidateDetail.candidate_id,\r\n      selectedDate,\r\n      selectedCompany,\r\n      false\r\n    )\r\n      .then((data) => {\r\n        setShowSuccess(true);\r\n        console.log(data, \"interviewFollowDate\");\r\n        setTimeout(() => {\r\n          setShowSuccess(false);\r\n          setfollowUpDateopen(false);\r\n          setSelectedDate((prev) => ({\r\n            ...prev,\r\n            tentativeInterviewDate: null,\r\n            followUpDate1: null,\r\n          }));\r\n          setSelectedCompany((prev) => ({\r\n            ...prev,\r\n            selectedCompany: \"\",\r\n          }));\r\n          setSelectedCompany(\"\");\r\n        }, 1000);\r\n\r\n        postCandidate(CandidateRegisterFilter)\r\n          .then((data) => {\r\n            // console.log(data, \"dataaa\");\r\n            if (data) {\r\n              Dispatch(\r\n                CandidateRegisteredActions.setRegisterCandidateList(data)\r\n              );\r\n\r\n              // Check if total_count is available in the response data\r\n              if (data[0] && data[0].total_count !== undefined) {\r\n                setTotalCount(data[0].total_count);\r\n                setPageCount((prev) => ({\r\n                  ...prev,\r\n                  totalPages: Math.ceil(\r\n                    (data.length > 0 ? data[0].total_count : 10) / size\r\n                  ),\r\n                }));\r\n              } else {\r\n                // If total_count is not available, set totalCount and totalPages to default values\r\n                setTotalCount(0);\r\n                setPageCount((prev) => ({\r\n                  ...prev,\r\n                  totalPages: 0,\r\n                }));\r\n                // Dispatch an empty array to CandidateRegisteredActions\r\n                Dispatch(\r\n                  CandidateRegisteredActions.setRegisterCandidateList([])\r\n                );\r\n              }\r\n            } else {\r\n              console.error(\r\n                \"Data received from postCandidate is undefined or null.\"\r\n              );\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            alert(\"Something went wrong\" + err);\r\n          })\r\n          .finally(() => {\r\n            setShowLoader(false);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error submitting interview follow-up:\", error);\r\n      });\r\n  };\r\n  function handleInterviewDateClose() {\r\n    setfollowUpDateopen(false);\r\n    setSelectedDate((prev) => ({\r\n      ...prev,\r\n      tentativeInterviewDate: \"\",\r\n      followUpDate1: \"\",\r\n    }));\r\n    setSelectedCompany(\"\");\r\n    setValidity((prev) => ({\r\n      ...prev,\r\n      isFollowDate1: true,\r\n      isFollowDate2: true,\r\n    }));\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className={`${canLeadStyle.Topcontainer}`}>\r\n          {\" \"}\r\n          <div className=\"d-flex \">\r\n            Show {\"  \"}\r\n            <select\r\n              name=\"\"\r\n              id=\"\"\r\n              className=\"px-1 py-1 mx-2\"\r\n              onChange={(event) => candidateSize(event.target.value)}\r\n            >\r\n              <option selected value=\"10\">\r\n                10\r\n              </option>\r\n              <option value=\"20\">20</option>\r\n              <option value=\"30\">30</option>\r\n            </select>\r\n            {\"   \"}\r\n            Entries\r\n          </div>\r\n          <div className={`${canLeadStyle.filterAdduser}`}>\r\n            <div className=\"mt-1 me-2\">Total Count : {totalCount}</div>\r\n            <div\r\n              className=\"p-1 success  me-2 mx-2 ms-auto\"\r\n\r\n              // style={{ : \"#169C50\", color: \"white\" }}\r\n            >\r\n              <LuRefreshCcw onClick={handleReset} />\r\n            </div>\r\n            <RegisterCandidateFilter />\r\n          </div>\r\n        </div>\r\n        <div className=\"\" style={{ maxWidth: \"100vw\", overflowX: \"auto\" }}>\r\n          <TableContainer style={{ height: \"64vh\", overflowY: \"auto\" }}>\r\n            <Table stickyHeader aria-label=\"sticky table\" className={``}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n                  <StyledTableCell>Mobile Number</StyledTableCell>\r\n                  <StyledTableCell>Job Category</StyledTableCell>\r\n                  <StyledTableCell>Experience</StyledTableCell>\r\n                  <StyledTableCell>Qualification</StyledTableCell>\r\n                  <StyledTableCell>Preferred City</StyledTableCell>\r\n                  {isSuperAdmin && (\r\n                    <StyledTableCell>Assigned To</StyledTableCell>\r\n                  )}\r\n                  <StyledTableCell>Registered on</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {CanList.length > 0 &&\r\n                  CanList.map((data, i) => {\r\n                    return (\r\n                      <TableRow\r\n                        key={i}\r\n                        sx={{\r\n                          \"&:last-child td, &:last-child th\": {\r\n                            border: 0,\r\n                          },\r\n                        }}\r\n                        onClick={() => {\r\n                          currentCanDetails(data);\r\n                        }}\r\n                      >\r\n                        <StyledTableCell>\r\n                          <span\r\n                            onClick={() => {\r\n                              handleCandidateDetails(\r\n                                data.candidate_id,\r\n                                \"RegisterCandidate\"\r\n                              );\r\n                            }}\r\n                            style={{ cursor: \"pointer\" }}\r\n                            className=\"text-primary \"\r\n                            title={data.first_name}\r\n                          >\r\n                            {data.first_name\r\n                              ? textTruncate(\r\n                                  capitalizeWords(data.first_name),\r\n                                  15\r\n                                ) +\r\n                                \" \" +\r\n                                (data.last_name\r\n                                  ? textTruncate(\r\n                                      capitalizeWords(data.last_name),\r\n                                      15\r\n                                    ) + \"\"\r\n                                  : \"\")\r\n                              : \"-\"}\r\n                          </span>\r\n                        </StyledTableCell>\r\n                        <StyledTableCell>{data.mobile_number}</StyledTableCell>{\" \"}\r\n                        <StyledTableCell title={data.job_category}>\r\n                          {data.job_category &&\r\n                            textTruncate(data.job_category, 20)}\r\n                          {!data.job_category && <>-</>}\r\n                        </StyledTableCell>{\" \"}\r\n                        <StyledTableCell>\r\n                          {data.exp_in_years} Year(s)\r\n                        </StyledTableCell>{\" \"}\r\n                        <StyledTableCell title={data.qualification}>\r\n                          {textTruncate(data.qualification, 20)}\r\n                        </StyledTableCell>{\" \"}\r\n                        <StyledTableCell title={data.pref_location}>\r\n                          {data.pref_location &&\r\n                            textTruncate(data.pref_location, 20)}\r\n                          {!data.pref_location && <>-</>}\r\n                        </StyledTableCell>{\" \"}\r\n                        {isSuperAdmin && (\r\n                          <StyledTableCell align=\"left\">\r\n                            <>{adminName[adminid.indexOf(data.assign_to)]}</>\r\n                          </StyledTableCell>\r\n                        )}\r\n                        <StyledTableCell>\r\n                          {<DMMMYYYY_formate dateValue={data.created_time} />}\r\n                        </StyledTableCell>{\" \"}\r\n                        <StyledTableCell>\r\n                          <div className={`${RegisterCandidateStyle.Status}`}>\r\n                            <div>\r\n                              {data.qualified === 1 && (\r\n                                <>\r\n                                  <div\r\n                                    className={`${RegisterCandidateStyle.qualified}`}\r\n                                  >\r\n                                    Qualified\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n\r\n                              {data.not_qualified === 1 && (\r\n                                <>\r\n                                  <div\r\n                                    className={`${RegisterCandidateStyle.Notqualified}`}\r\n                                  >\r\n                                    Not Qualified\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                              {data.is_daily_task === 1 && (\r\n                                <>\r\n                                  <div\r\n                                    className={`${RegisterCandidateStyle.Followup}`}\r\n                                  >\r\n                                    Follow Up\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                            <div className=\"btn-group dropstart\">\r\n                              <button\r\n                                type=\"button\"\r\n                                // className={`btn btn-light `}\r\n\r\n                                data-bs-toggle=\"dropdown\"\r\n                                data-bs-no-caret=\"true\"\r\n                                aria-expanded=\"false\"\r\n                                style={{\r\n                                  border: \"none\",\r\n                                  background: \"none\",\r\n                                  color: \"#000\",\r\n                                  cursor: \"pointer\",\r\n                                  outline: \"none\",\r\n                                  position: \"relative\",\r\n                                  right: \"5px\",\r\n                                  // backgroundColor: \"red\",\r\n                                  fontSize: 20,\r\n                                  zIndex: 1,\r\n                                }}\r\n                              >\r\n                                <span className=\"\">\r\n                                  {\" \"}\r\n                                  <BsThreeDotsVertical />{\" \"}\r\n                                </span>\r\n                                {/* <AiOutlineEdit /> */}\r\n                              </button>{\" \"}\r\n                              <ul\r\n                                className=\"dropdown-menu\"\r\n                                style={{ textAlign: \"left\" }}\r\n                                // ref={dropdownRef}\r\n                              >\r\n                                <li\r\n                                  onClick={() => {\r\n                                    openIsQualifyPopup(\"qualify\");\r\n                                  }}\r\n                                >\r\n                                  <a className=\"dropdown-item\" href=\"#\">\r\n                                    <div\r\n                                      className={`${FBStyle.select_wrp}`}\r\n                                      onClick={() => {\r\n                                        handleButtonClick(\"qualified\");\r\n                                        handleConfirmationOpenQualify(true);\r\n                                      }}\r\n                                    >\r\n                                      <input\r\n                                        type=\"radio\"\r\n                                        // ref={inputRef.qualified}\r\n                                        name={`status_${data.user_id}`}\r\n                                        checked={data.qualified}\r\n                                        id={`qualified_${data.user_id}`}\r\n                                      />\r\n\r\n                                      <label\r\n                                        htmlFor={`qualified_${data.user_id}`}\r\n                                      >\r\n                                        {\" \"}\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#169C50\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />\r\n                                        Qualified\r\n                                      </label>\r\n                                    </div>\r\n                                  </a>\r\n                                </li>\r\n                                <li\r\n                                  onClick={() => {\r\n                                    openIsQualifyPopup(\"notQualify\");\r\n                                  }}\r\n                                >\r\n                                  <a\r\n                                    className=\"dropdown-item\"\r\n                                    href=\"#\"\r\n                                    onClick={() => {\r\n                                      handleButtonClick(\"notQualified\");\r\n                                      handleConfirmationOpen(true);\r\n                                    }}\r\n                                  >\r\n                                    <div className={`${FBStyle.select_wrp}`}>\r\n                                      <input\r\n                                        // ref={inputRef.notQualified}\r\n                                        type=\"radio\"\r\n                                        checked={data.notQualified}\r\n                                        name={`status_${data.user_id}`}\r\n                                        id={`notQualified_${data.user_id}`}\r\n                                      />\r\n                                      <label\r\n                                        htmlFor={`notQualified_${data.user_id}`}\r\n                                      >\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#b2261c\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Not Qualified\r\n                                      </label>\r\n                                    </div>\r\n                                  </a>\r\n                                </li>\r\n\r\n                                <li\r\n                                  onClick={() => {\r\n                                    openFollowup(true);\r\n                                    //  openIsQualifyPopup(\"notQualify\");\r\n                                  }}\r\n                                >\r\n                                  <a\r\n                                    className=\"dropdown-item\"\r\n                                    href=\"#\"\r\n                                    onClick={() =>\r\n                                      handleButtonClick(\"followup\")\r\n                                    }\r\n                                  >\r\n                                    <div className={`${FBStyle.select_wrp}`}>\r\n                                      <input\r\n                                        // ref={inputRef.notQualified}\r\n                                        type=\"radio\"\r\n                                        checked={data.followup}\r\n                                        name={`status_${data.user_id}`}\r\n                                        id={`followup_${data.user_id}`}\r\n                                      />\r\n                                      <label\r\n                                        htmlFor={`followup_${data.user_id}`}\r\n                                      >\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"#430CBA\",\r\n                                            fontSize: 20,\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Follow up\r\n                                      </label>\r\n                                    </div>\r\n                                  </a>\r\n                                </li>\r\n                                {/* <li\r\n                                  onClick={() => {\r\n                                    setfollowUpDateopen(true);\r\n                                  }}\r\n                                >\r\n                                  <a href=\"#\" className=\"dropdown-item\">\r\n                                    {\" \"}\r\n                                    <div className={`${FBStyle.select_wrp}`}>\r\n                                      {\" \"}\r\n                                      <input\r\n                                        type=\"radio\"\r\n                                        // ref={inputRef.qualified}\r\n                                        name={`status_${data.user_id}`}\r\n                                        checked={data.qualified}\r\n                                        id={`qualified_${data.user_id}`}\r\n                                      />\r\n                                      <label>\r\n                                        <GoDotFill\r\n                                          style={{\r\n                                            color: \"blue\",\r\n                                            fontSize: 20,\r\n                                            cursor: \"pointer\",\r\n                                          }}\r\n                                        />{\" \"}\r\n                                        Interview Date Update\r\n                                      </label>\r\n                                    </div>{\" \"}\r\n                                  </a>\r\n                                </li> */}\r\n                                {/* {data.tentative_interview_date == null ? (\r\n                                  \"\"\r\n                                ) : (\r\n                                  <li\r\n                                    onClick={() => {\r\n                                      setfollowUpDateopen(true);\r\n                                    }}\r\n                                  >\r\n                                    <a href=\"#\" className=\"dropdown-item\">\r\n                                      {\" \"}\r\n                                      <div className={`${FBStyle.select_wrp}`}>\r\n                                        {\" \"}\r\n                                        <input\r\n                                          type=\"radio\"\r\n                                          // ref={inputRef.qualified}\r\n                                          name={`status_${data.user_id}`}\r\n                                          checked={data.qualified}\r\n                                          id={`qualified_${data.user_id}`}\r\n                                        />\r\n                                        <label>\r\n                                          <GoDotFill\r\n                                            style={{\r\n                                              color: \"blue\",\r\n                                              fontSize: 20,\r\n                                              cursor: \"pointer\",\r\n                                            }}\r\n                                          />{\" \"}\r\n                                          Interview Date Update\r\n                                        </label>\r\n                                      </div>{\" \"}\r\n                                    </a>\r\n                                  </li>\r\n                                )} */}\r\n                              </ul>\r\n                            </div>\r\n                          </div>\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n\r\n                <div>\r\n                  {!CanList.length > 0 && (\r\n                    <>\r\n                      <div className=\"m-3 text-danger\">Not Found</div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <>\r\n            <Backdrop\r\n              sx={{\r\n                color: \"#fff\",\r\n                zIndex: (theme) => theme.zIndex.drawer + 1,\r\n              }}\r\n              open={showLoader}\r\n              onClick={() => {}} // Prevent closing on backdrop click\r\n            >\r\n              <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n          </>\r\n\r\n          <div className=\"d-flex justify-content-center mt-2\">\r\n            <Stack spacing={2}>\r\n              <Pagination\r\n                // count={10}\r\n                shape=\"rounded\"\r\n                siblingCount={1}\r\n                boundaryCount={1}\r\n                count={pageCount.totalPages}\r\n                variant=\"outlined\"\r\n                color=\"success\"\r\n                onChange={candidatePagination}\r\n              />\r\n            </Stack>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* {isQualifiedDetails.openPopup && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            childComponent={\r\n              <ConfirmationPopup\r\n                heading={\"Confirmation\"}\r\n                headingText={isQualifiedDetails.confirmtext}\r\n                onConfirm={ConfirmFormSubmit}\r\n                // enableSubmit={enableSubmit}\r\n                onRequestClose={handleConfirmationClose}\r\n                //</br> with <b>${contactPersonName}</b>\r\n              />\r\n            }\r\n          />\r\n        </MyModal>\r\n      )} */}\r\n      {showConfirmationqualifiedPopup && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={2000}\r\n            childComponent={\r\n              <>\r\n                <div>\r\n                  <div className=\"text-center mb-3\">Qualify Candidate</div>\r\n                  <TextField\r\n                    id=\"outlined-multiline-flexible\"\r\n                    label=\"Add Notes\"\r\n                    multiline\r\n                    required\r\n                    onChange={(event) => {\r\n                      setIsQualifiedDetails((prev) => ({\r\n                        ...prev,\r\n                        notes: event.target.value,\r\n                      }));\r\n                    }}\r\n                    maxRows={4}\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n                <div className=\"d-flex justify-content-end gap-1 mt-4\">\r\n                  <button\r\n                    className=\"btn text-white me-3\"\r\n                    onClick={handleCancelClick}\r\n                    style={{ backgroundColor: \"#d00a0a\" }}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn text-white\"\r\n                    onClick={ConfirmFormSubmit}\r\n                    // disabled={enableSubmit}\r\n                    style={{ backgroundColor: \"#169C50\" }}\r\n                  >\r\n                    Qualify\r\n                  </button>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {showConfirmationPopup && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={2000}\r\n            childComponent={\r\n              <>\r\n                <div>\r\n                  <div className=\"text-center mb-3\">Disqualify Candidate</div>\r\n                  <TextField\r\n                    id=\"outlined-multiline-flexible\"\r\n                    label=\"Add Notes\"\r\n                    multiline\r\n                    required\r\n                    onChange={(event) => {\r\n                      setIsQualifiedDetails((prev) => ({\r\n                        ...prev,\r\n                        notes: event.target.value,\r\n                      }));\r\n                    }}\r\n                    maxRows={4}\r\n                    fullWidth\r\n                  />\r\n                </div>\r\n                <div className=\"d-flex justify-content-end gap-1 mt-4\">\r\n                  <button\r\n                    className=\"btn text-white me-3\"\r\n                    onClick={handleCancelClicknotqualify}\r\n                    style={{ backgroundColor: \"#d00a0a\" }}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn text-white\"\r\n                    onClick={ConfirmFormSubmit}\r\n                    // disabled={enableSubmit}\r\n                    style={{ backgroundColor: \"#169C50\" }}\r\n                  >\r\n                    Disqualify\r\n                  </button>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n\r\n      {followupopen && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={1001}\r\n            childComponent={\r\n              <div\r\n                style={{\r\n                  width: \"350px\",\r\n                  // height: \"800px\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <FormControl\r\n                  fullWidth\r\n                  error={followupError.dateTime}\r\n                  style={{ marginBottom: \"16px\" }}\r\n                >\r\n                  {\" \"}\r\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DemoContainer components={[\"DateTimePicker\", \"TextField\"]}>\r\n                      <DateTimePicker\r\n                        label=\"select date and time\"\r\n                        error={Boolean(dateTimeError)}\r\n                        // helperText={dateTi/meError}\r\n                        // value={dateTime}\r\n                        onChange={(date) => {\r\n                          setDateTime(date);\r\n                          setFollowupError((prev) => ({\r\n                            ...prev,\r\n                            dateTime: false,\r\n                          }));\r\n                          const formattedDate =\r\n                            dayjs(date).format(\"YYYY-MM-DD hh:mm A\");\r\n                          setFormattedDate(formattedDate);\r\n                        }}\r\n                      />\r\n                      {/* {followupError.dateTime && (\r\n                        <FormHelperText error>\r\n                          Please select a date and time\r\n                        </FormHelperText>\r\n                      )} */}\r\n                      {followupError.dateTime && (\r\n                        <span style={{ color: \"#d44349\" }}>\r\n                          Please select a date and time\r\n                        </span>\r\n                      )}\r\n                    </DemoContainer>\r\n                  </LocalizationProvider>\r\n                </FormControl>\r\n                <TextField\r\n                  style={{ marginBottom: \"16px\" }}\r\n                  id=\"outlined-multiline-flexible\"\r\n                  label=\"Add Notes\"\r\n                  multiline\r\n                  onChange={(event) => {\r\n                    setFollownotes(event.target.value);\r\n                    setFollowupError((prev) => ({\r\n                      ...prev,\r\n                      addNotes: false,\r\n                    }));\r\n                  }}\r\n                  maxRows={4}\r\n                  fullWidth\r\n                  error={followupError.addNotes}\r\n                  // helperText={\r\n                  //   followupError.addNotes ? \"Notes cannot be empty\" : \"\"\r\n                  // }\r\n                />\r\n                {followupError.addNotes && (\r\n                  <span style={{ color: \"#d44349\" }}>\r\n                    Notes cannot be empty\r\n                  </span>\r\n                )}\r\n                {/* <FormControl fullWidth style={{ marginBottom: \"16px\" }}>\r\n                  <InputLabel id=\"demo-simple-select-label\">\r\n                    Follow up for\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    label=\"Follow up for\"\r\n                    value={selectedValue}\r\n                    style={{ marginBottom: \"16px\", minWidth: \"120px\" }}\r\n                    error={followupError.selectEvent}\r\n                    onChange={(event) => {\r\n                      setSelectedValue(event.target.value);\r\n                      setFollowupError((prev) => ({\r\n                        ...prev,\r\n                        selectEvent: false,\r\n                      }));\r\n                    }}\r\n                  >\r\n                    {eventData.map((event) => (\r\n                      <MenuItem key={event.id} value={event.eventName}>\r\n                        {event.eventName}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  {followupError.selectEvent && (\r\n                    <span style={{ color: \"#d44349\" }}>\r\n                      Select event is empty\r\n                    </span>\r\n                  )}\r\n                </FormControl> */}\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    style={{\r\n                      color: \"red\",\r\n                      borderColor: \"red\",\r\n                      marginRight: \"8px\",\r\n                    }}\r\n                    onClick={closeFollowup}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    style={{ color: \"green\", borderColor: \"green\" }}\r\n                    onClick={handleFollowSubmit}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Box>\r\n              </div>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {followUpDateopen && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex={\"1500\"}\r\n            childComponent={\r\n              <>\r\n                <div style={{ width: \"350px\" }}>\r\n                  {\" \"}\r\n                  <p className=\"text-center\">\r\n                    <b>Candidate Interview Date</b>\r\n                  </p>\r\n                  <form action=\"#\" onSubmit={handleSubmit}>\r\n                    <div className=\"row mt-2\">\r\n                      <div className=\"col-sm-12 d-flex gap-3 align-item-center\">\r\n                        <label\r\n                          htmlFor=\"currentpositionDropdown\"\r\n                          className=\"form-label\"\r\n                        >\r\n                          <strong>Interview Date : </strong>\r\n                        </label>\r\n                        <div>\r\n                          <DatePicker\r\n                            selected={selectedDate.tentativeInterviewDate}\r\n                            onChange={(date) =>\r\n                              handleDateChange(date, \"tentativeInterviewDate\")\r\n                            }\r\n                            minDate={new Date()}\r\n                            dateFormat=\"dd/MM/yyyy\"\r\n                            className=\"form-control\"\r\n                            // withPortal={true}\r\n                          />\r\n                          {validity.isFollowDate1 ? null : (\r\n                            <div className=\"\" style={{ color: \"red\" }}>\r\n                              Please select a date.\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      {dateDiff >= 4 && (\r\n                        <div className=\"col-sm-12 mt-2 d-flex gap-3 align-item-center\">\r\n                          <label\r\n                            htmlFor=\"currentpositionDropdown\"\r\n                            className=\"form-label\"\r\n                          >\r\n                            <strong>Follow up Date :</strong>\r\n                          </label>\r\n                          <div>\r\n                            <DatePicker\r\n                              selected={selectedDate.followUpDate1}\r\n                              onChange={(date) =>\r\n                                handleDateChange(date, \"followUpDate1\")\r\n                              }\r\n                              minDate={new Date()}\r\n                              maxDate={\r\n                                new Date(\r\n                                  selectedDate.tentativeInterviewDate.getTime() -\r\n                                    2 * 24 * 60 * 60 * 1000\r\n                                )\r\n                              }\r\n                              dateFormat=\"dd/MM/yyyy\"\r\n                              className=\"form-control\"\r\n                              // withPortal={true}\r\n                            />\r\n                            {validity.isFollowDate2 ? null : (\r\n                              <div className=\"\" style={{ color: \"red\" }}>\r\n                                Please select a date.\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-sm-12 mt-2 d-flex gap-3 align-item-center\">\r\n                        <label\r\n                          htmlFor=\"currentpositionDropdown\"\r\n                          className=\"form-label\"\r\n                        >\r\n                          <strong>Company Name:</strong>\r\n                        </label>\r\n                        <div className=\"w-100\">\r\n                          <Autocomplete\r\n                            disablePortal\r\n                            id=\"combo-box-demo\"\r\n                            options={companyNames}\r\n                            value={selectedCompany}\r\n                            onChange={handleCompanyNameChange}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Company Name\"\r\n                                fullWidth\r\n                                error={companyNameError} // Apply error state\r\n                                helperText={\r\n                                  companyNameError\r\n                                    ? \"Please select a company name\"\r\n                                    : \"\"\r\n                                }\r\n                              />\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end gap-2 mt-3 \">\r\n                      <div\r\n                        className=\"btn btn-danger px-4\"\r\n                        onClick={handleInterviewDateClose}\r\n                      >\r\n                        Close\r\n                      </div>\r\n                      <button className=\"btn btn-success px-4\" type=\"submit\">\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </>\r\n            }\r\n          />\r\n        </MyModal>\r\n      )}\r\n      {showSuccess && (\r\n        <MyModal>\r\n          <ModalContainer\r\n            zIndex=\"5000\"\r\n            childComponent={<SuccessTick HeadText=\"Successfully Updated\" />}\r\n          />\r\n        </MyModal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RegisteredCandidateTable;\r\n"],"names":["Dispatch","useDispatch","filterDetails","useSelector","state","CandidateRegistered","filterData","showFilter","setShowFilter","useState","adminList","setAdminList","anchorEl","setAnchorEl","React","showCustom","setshowCustom","open","Boolean","validationErrors","setValidationErrors","start","end","isSuperAdmin","adminDetails","roleID","initialFilterObj","adminId","localStorage","getItem","mobileNumber","gender","industry","jobCategory","eligibility","qualification","candidateType","specification","skills","prefLocation","passed_out_year","experience","maxExperience","pages","size","createdTime","endDate","convertDateYYYYMMDD","Date","dateFilterType","followUpDate2","followUpDate1","options","setOptions","Industries","Jobrole","keySkills","Qualification","filteredObj","setFilteredObj","showRedDot","setShowRedDot","dateRange","setDateRange","prefillMultiSelection","type","array2","array1","filter","item","includes","courses","useEffect","CandidateRegisteredActions","setRegisterCandidateListFilter","getJobFilterOptions","then","data","prevOptions","el","category","element","GetAllsdminDetails","activeAdmins","Deactived","catch","alert","apiPromises","GetITICourses","GetdiplomaCourses","GetUGCourses","GetPGCourses","Promise","all","results","specificationData","map","flat","error","console","expYearMonth","value","label","handleExperienceChange","e","name","target","prev","handleDateSelect","val","selectedOption","today","startDate","setDate","getDate","toISOString","split","setMonth","getMonth","handleCustomDate","postFilter","keysToRemove","filterObject","initialFilterObject","forEach","key","JSON","stringify","_jsxs","children","_jsx","className","concat","FBStyle","Filterbutton","variant","onClick","BiFilterAlt","style","backgroundColor","width","height","borderRadius","MyModal","ModalContainer","zIndex","childComponent","_Fragment","preventDefault","cursor","fontSize","AiOutlineClose","registercandidatestyle","BoxContainerWidth","onSubmit","handleSubmit","TextField","id","fullWidth","defaultValue","onChange","truncatedValue","replace","slice","inputProps","maxLength","InputProps","startAdornment","display","alignItems","AiOutlinePhone","marginRight","FormControl","undefined","event","currentTarget","Menu","onClose","handleClose","MenuListProps","MenuItem","minWidth","htmlFor","min","max","isFormValid","isValid","Autocomplete","limitTags","multiple","length","updatedcategory","push","updateJobCategory","option","getOptionLabel","filterSelectedOptions","renderInput","params","placeholder","updateskills","updateSkills","updateQualification","updatequalification","log","mappedCourses","handleSpecification","course","updateCity","handleEligiblityChange","select","handleGenderChange","handleAssignToChange","userName","DatePicker","selected","dateFormat","date","search","sx","StyledTableCell","styled","TableCell","_ref","theme","tableCellClasses","head","color","padding","body","CandidateRegisterFilter","CanList","RegisterCandidateList","currentCandidateDetail","setCurrentCandidateDetails","showConfirmationPopup","setShowConfirmPopup","showConfirmationqualifiedPopup","setShowConfirmQualifiedPopup","isQualifiedDetails","setIsQualifiedDetails","confirmtext","notes","isQualified","openPopup","candidateId","pageCount","setPageCount","totalPages","totalCount","currentPage","followupError","setFollowupError","dateTime","addNotes","selectEvent","setSize","setTotalCount","Follownotes","setFollownotes","selectedValue","setSelectedValue","eventData","setEventData","showSuccess","setShowSuccess","enableSubmit","setEnableSubmit","dateTimeError","setDateTimeError","setDateTime","formattedDate","setFormattedDate","followupopen","setFollowupOpen","showLoader","setShowLoader","followUpDateopen","setfollowUpDateopen","selectedDate","setSelectedDate","tentativeInterviewDate","validity","setValidity","isFollowDate1","isFollowDate2","adminName","setAdminName","adminid","setAdminId","companyNames","setCompanyNames","selectedCompany","setSelectedCompany","companyNameError","setCompanyNameError","closeFollowup","postCandidate","setRegisterCandidateList","Math","ceil","total_count","async","GetFollowUpEvents","fetchEventData","adminNames","adminIds","setRegisterCandidateListFilterAdminId","GetCompanyName","fetchData","err","finally","inputRef","qualified","useRef","notQualified","followup","handleButtonClick","refName","ref","current","click","openIsQualifyPopup","status","confirmText","first_name","candidate_id","ConfirmFormSubmit","PutCandidateIsQualified","updatedCanList","candidate","not_qualified","handleDateChange","prevState","dateDiff","canLeadStyle","Topcontainer","setRegisterCandidateListFiltersize","candidateSize","filterAdduser","LuRefreshCcw","handleReset","assignTo","page","RegisterCandidateFilter","maxWidth","overflowX","TableContainer","overflowY","Table","stickyHeader","TableHead","TableRow","TableBody","i","border","currentCanDetails","getcandidateDetails","getCandidateLead","commonPopupActions","setShowPopup","handleCandidateDetails","title","textTruncate","capitalizeWords","last_name","mobile_number","job_category","exp_in_years","pref_location","align","indexOf","assign_to","DMMMYYYY_formate","dateValue","created_time","RegisterCandidateStyle","Status","Notqualified","is_daily_task","Followup","background","outline","position","right","BsThreeDotsVertical","textAlign","href","select_wrp","user_id","checked","GoDotFill","Backdrop","drawer","CircularProgress","Stack","spacing","Pagination","shape","siblingCount","boundaryCount","count","setRegisterCandidateListFilterPage","multiline","required","maxRows","handleCancelClick","handleCancelClicknotqualify","marginBottom","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DateTimePicker","dayjs","format","Box","justifyContent","Button","borderColor","trim","formattedDateTime","followUpTime","PostFollowup","setTimeout","action","PutCandidateInterviewFollowup","minDate","maxDate","getTime","disablePortal","handleCompanyNameChange","helperText","SuccessTick","HeadText"],"sourceRoot":""}